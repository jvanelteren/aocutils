# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/aocutils',
                'doc_host': 'https://jvanelteren.github.io',
                'git_url': 'https://github.com/jvanelteren/aocutils',
                'lib_path': 'aocutils'},
  'syms': { 'aocutils.cfg': { 'aocutils.cfg.CFG': ('context_free_grammar.html#cfg', 'aocutils/cfg.py'),
                              'aocutils.cfg.CFG.__init__': ('context_free_grammar.html#cfg.__init__', 'aocutils/cfg.py'),
                              'aocutils.cfg.CFG.check_possible_option': ( 'context_free_grammar.html#cfg.check_possible_option',
                                                                          'aocutils/cfg.py'),
                              'aocutils.cfg.CFG.grammar_to_cnf': ('context_free_grammar.html#cfg.grammar_to_cnf', 'aocutils/cfg.py'),
                              'aocutils.cfg.CFG.pieces': ('context_free_grammar.html#cfg.pieces', 'aocutils/cfg.py'),
                              'aocutils.cfg.CFG.solve': ('context_free_grammar.html#cfg.solve', 'aocutils/cfg.py'),
                              'aocutils.cfg.CFG.splitter': ('context_free_grammar.html#cfg.splitter', 'aocutils/cfg.py'),
                              'aocutils.cfg.CFG.to_cnf_remove_options': ( 'context_free_grammar.html#cfg.to_cnf_remove_options',
                                                                          'aocutils/cfg.py'),
                              'aocutils.cfg.CFG.to_cnf_remove_triplets': ( 'context_free_grammar.html#cfg.to_cnf_remove_triplets',
                                                                           'aocutils/cfg.py'),
                              'aocutils.cfg.CFG.to_cnf_remove_unit_productions': ( 'context_free_grammar.html#cfg.to_cnf_remove_unit_productions',
                                                                                   'aocutils/cfg.py')},
            'aocutils.common': { 'aocutils.common._flatten': ('common.html#_flatten', 'aocutils/common.py'),
                                 'aocutils.common.atom': ('common.html#atom', 'aocutils/common.py'),
                                 'aocutils.common.atoms': ('common.html#atoms', 'aocutils/common.py'),
                                 'aocutils.common.copy_func': ('common.html#copy_func', 'aocutils/common.py'),
                                 'aocutils.common.data': ('common.html#data', 'aocutils/common.py'),
                                 'aocutils.common.dotproduct': ('common.html#dotproduct', 'aocutils/common.py'),
                                 'aocutils.common.first': ('common.html#first', 'aocutils/common.py'),
                                 'aocutils.common.flatten': ('common.html#flatten', 'aocutils/common.py'),
                                 'aocutils.common.ints': ('common.html#ints', 'aocutils/common.py'),
                                 'aocutils.common.list_atoms': ('common.html#list_atoms', 'aocutils/common.py'),
                                 'aocutils.common.list_multiply': ('common.html#list_multiply', 'aocutils/common.py'),
                                 'aocutils.common.mapt': ('common.html#mapt', 'aocutils/common.py'),
                                 'aocutils.common.multidict': ('common.html#multidict', 'aocutils/common.py'),
                                 'aocutils.common.patch': ('common.html#patch', 'aocutils/common.py'),
                                 'aocutils.common.patch_to': ('common.html#patch_to', 'aocutils/common.py'),
                                 'aocutils.common.quantify': ('common.html#quantify', 'aocutils/common.py'),
                                 'aocutils.common.rev': ('common.html#rev', 'aocutils/common.py'),
                                 'aocutils.common.to_int': ('common.html#to_int', 'aocutils/common.py'),
                                 'aocutils.common.zippify': ('common.html#zippify', 'aocutils/common.py')},
            'aocutils.datascience': { 'aocutils.datascience.load': ('datascience.html#load', 'aocutils/datascience.py'),
                                      'aocutils.datascience.nan_inspect': ('datascience.html#nan_inspect', 'aocutils/datascience.py'),
                                      'aocutils.datascience.save': ('datascience.html#save', 'aocutils/datascience.py'),
                                      'aocutils.datascience.timeit': ('datascience.html#timeit', 'aocutils/datascience.py'),
                                      'aocutils.datascience.untar_data': ('datascience.html#untar_data', 'aocutils/datascience.py')},
            'aocutils.grid': { 'aocutils.grid.arr_neighbors': ('grid.html#arr_neighbors', 'aocutils/grid.py'),
                               'aocutils.grid.arr_to_dict': ('grid.html#arr_to_dict', 'aocutils/grid.py'),
                               'aocutils.grid.conv1d': ('grid.html#conv1d', 'aocutils/grid.py'),
                               'aocutils.grid.conv2d': ('grid.html#conv2d', 'aocutils/grid.py'),
                               'aocutils.grid.dimensions': ('grid.html#dimensions', 'aocutils/grid.py'),
                               'aocutils.grid.grid_to_dict': ('grid.html#grid_to_dict', 'aocutils/grid.py'),
                               'aocutils.grid.iterate': ('grid.html#iterate', 'aocutils/grid.py'),
                               'aocutils.grid.manhattan': ('grid.html#manhattan', 'aocutils/grid.py'),
                               'aocutils.grid.neighbors': ('grid.html#neighbors', 'aocutils/grid.py'),
                               'aocutils.grid.positive': ('grid.html#positive', 'aocutils/grid.py'),
                               'aocutils.grid.rotate': ('grid.html#rotate', 'aocutils/grid.py')},
            'aocutils.math': { 'aocutils.math.Segment': ('math.html#segment', 'aocutils/math.py'),
                               'aocutils.math.Segment.__call__': ('math.html#segment.__call__', 'aocutils/math.py'),
                               'aocutils.math.Segment.__init__': ('math.html#segment.__init__', 'aocutils/math.py'),
                               'aocutils.math.Segment.query': ('math.html#segment.query', 'aocutils/math.py'),
                               'aocutils.math.Segment.update': ('math.html#segment.update', 'aocutils/math.py'),
                               'aocutils.math.all_combinations': ('math.html#all_combinations', 'aocutils/math.py'),
                               'aocutils.math.all_permutations': ('math.html#all_permutations', 'aocutils/math.py'),
                               'aocutils.math.crt': ('math.html#crt', 'aocutils/math.py'),
                               'aocutils.math.factors': ('math.html#factors', 'aocutils/math.py'),
                               'aocutils.math.gcd': ('math.html#gcd', 'aocutils/math.py'),
                               'aocutils.math.lcm': ('math.html#lcm', 'aocutils/math.py'),
                               'aocutils.math.lis': ('math.html#lis', 'aocutils/math.py'),
                               'aocutils.math.mul_inv': ('math.html#mul_inv', 'aocutils/math.py')},
            'aocutils.maze': { 'aocutils.maze.bfs': ('maze.html#bfs', 'aocutils/maze.py'),
                               'aocutils.maze.dfs': ('maze.html#dfs', 'aocutils/maze.py'),
                               'aocutils.maze.dijkstra': ('maze.html#dijkstra', 'aocutils/maze.py'),
                               'aocutils.maze.get_path': ('maze.html#get_path', 'aocutils/maze.py')},
            'aocutils.shunting': { 'aocutils.shunting.ShuntingYard': ('shunting_yard.html#shuntingyard', 'aocutils/shunting.py'),
                                   'aocutils.shunting.ShuntingYard.__init__': ( 'shunting_yard.html#shuntingyard.__init__',
                                                                                'aocutils/shunting.py'),
                                   'aocutils.shunting.ShuntingYard.calc': ('shunting_yard.html#shuntingyard.calc', 'aocutils/shunting.py'),
                                   'aocutils.shunting.ShuntingYard.eval_postfix': ( 'shunting_yard.html#shuntingyard.eval_postfix',
                                                                                    'aocutils/shunting.py'),
                                   'aocutils.shunting.ShuntingYard.get_postfix': ( 'shunting_yard.html#shuntingyard.get_postfix',
                                                                                   'aocutils/shunting.py'),
                                   'aocutils.shunting.ShuntingYard.is_callable_string': ( 'shunting_yard.html#shuntingyard.is_callable_string',
                                                                                          'aocutils/shunting.py')},
            'aocutils.special': { 'aocutils.special.LazySegmentTree': ('special.html#lazysegmenttree', 'aocutils/special.py'),
                                  'aocutils.special.LazySegmentTree.__init__': ( 'special.html#lazysegmenttree.__init__',
                                                                                 'aocutils/special.py'),
                                  'aocutils.special.LazySegmentTree.add': ('special.html#lazysegmenttree.add', 'aocutils/special.py'),
                                  'aocutils.special.LazySegmentTree.getbest': ( 'special.html#lazysegmenttree.getbest',
                                                                                'aocutils/special.py'),
                                  'aocutils.special.Octree': ('special.html#octree', 'aocutils/special.py'),
                                  'aocutils.special.Octree.__gt__': ('special.html#octree.__gt__', 'aocutils/special.py'),
                                  'aocutils.special.Octree.count': ('special.html#octree.count', 'aocutils/special.py'),
                                  'aocutils.special.Octree.hits': ('special.html#octree.hits', 'aocutils/special.py'),
                                  'aocutils.special.Octree.split': ('special.html#octree.split', 'aocutils/special.py'),
                                  'aocutils.special.UnionFind': ('special.html#unionfind', 'aocutils/special.py'),
                                  'aocutils.special.UnionFind.__init__': ('special.html#unionfind.__init__', 'aocutils/special.py'),
                                  'aocutils.special.UnionFind._get_parent': ('special.html#unionfind._get_parent', 'aocutils/special.py'),
                                  'aocutils.special.UnionFind.add': ('special.html#unionfind.add', 'aocutils/special.py'),
                                  'aocutils.special.UnionFind.groups': ('special.html#unionfind.groups', 'aocutils/special.py'),
                                  'aocutils.special.UnionFind.union': ('special.html#unionfind.union', 'aocutils/special.py'),
                                  'aocutils.special.binarysearch': ('special.html#binarysearch', 'aocutils/special.py'),
                                  'aocutils.special.deduce_matches': ('special.html#deduce_matches', 'aocutils/special.py'),
                                  'aocutils.special.find_cycle': ('special.html#find_cycle', 'aocutils/special.py'),
                                  'aocutils.special.find_pattern_in_iter': ('special.html#find_pattern_in_iter', 'aocutils/special.py'),
                                  'aocutils.special.find_repeat': ('special.html#find_repeat', 'aocutils/special.py'),
                                  'aocutils.special.md5': ('special.html#md5', 'aocutils/special.py')},
            'aocutils.visuals': { 'aocutils.visuals.animate_grid': ('visual.html#animate_grid', 'aocutils/visuals.py'),
                                  'aocutils.visuals.labelize': ('visual.html#labelize', 'aocutils/visuals.py'),
                                  'aocutils.visuals.visualize_graph': ('visual.html#visualize_graph', 'aocutils/visuals.py')}}}