# AUTOGENERATED! DO NOT EDIT! File to edit: ../08_visual.ipynb.

# %% auto 0
__all__ = ['cat', 'visualize_graph', 'labelize', 'animate_grid']

# %% ../08_visual.ipynb 2
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

# https://pygraphviz.github.io/documentation/stable/install.html
# python -m pip install --global-option=build_ext --global-option="-IC:\Program Files\Graphviz\include" --global-option="-LC:\Program Files\Graphviz\lib" pygraphviz

# %% ../08_visual.ipynb 3
cat = ''.join
def visualize_graph(edges:set, labels=None):
    '''
    # %matplotlib inline
    Plots graph.
    edges: set with tuples (fromnode, tonode)
    labels: optional dictionary with node descriptions. If None, the node variable names will be used

    If the names are passed and the node is not found, 'Missing'will be appended in the label
    
    Usage example:
        from aocutils.special import visualize_graph, labelize
        visualize_graph(edges, labelize(lines))
    '''
    missing = 'Missing'
    if not labels: 
        labels = {}
        missing = ''

    G = nx.DiGraph()
    for k,v in edges:
    

        # weight = 'jmp' if lines[k][0].startswith('j') else ''
        weight = ''
        G.add_edge(labels.get(k, missing+str(k)), labels.get(v, missing+str(v)), weight=weight)
    # color_map = [party_colors[node] for node in G]
    pos = nx.nx_agraph.graphviz_layout(G,prog='neato', args ='')
    plt.figure(figsize=(32,18))
    nx.draw_networkx(G, pos,font_size=12, node_color='y')
    labels = nx.get_edge_attributes(G,'weight')
    nx.draw_networkx_edge_labels(G,pos,edge_labels=labels,label_pos=0.5, font_size=12)
    plt.margins(0.1,0.1)

def labelize(lines):
    '''
    Returns a dict with index, description
    Specifically for list of instructions to turn them into strings, preceded by their index
    E.g.
    labels[3] = '3jmpa'
    '''
    return {idx:''.join([str(idx)]+line) for idx, line in enumerate(lines)}

# %% ../08_visual.ipynb 5
from IPython.display import HTML
from matplotlib import animation, rc
# http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-as-interactive-javascript-widgets/
def animate_grid(arr, step):
    """
    Make sure to put in your notebook
        %matplotlib ipympl

    Arr is a numpy arr, 
    step is a function called with a counter, should return new grid

    Example usage:
    from aocutils.visuals import animate_grid
    def step(i):
        return np.random.rand(36).reshape((6,6))
    arr = np.random.rand(36).reshape((6,6))
    animate_grid(arr, step)

    """
    def update_fn(i):
        matrice.set_array(step(i))
    fig, ax = plt.subplots(figsize=(15,15))
    matrice = ax.matshow(arr)
    plt.colorbar(matrice)
    anim =  animation.FuncAnimation(fig, update_fn)
    anim._repr_html_() is None
    rc('animation', html='jshtml')
    return HTML(anim.to_jshtml())

