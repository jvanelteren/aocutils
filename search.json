[
  {
    "objectID": "grid.html",
    "href": "grid.html",
    "title": "Grid helpers",
    "section": "",
    "text": "source\n\ngridneigh\n\n gridneigh (filename, to_dict=True, diag=False, inc_self=False,\n            parser=None)\n\nExample to parse a simple grid consisting of ints When parser is None, characters will be parsed ——– >>> grid, neigh = gridneigh(‘input.txt’, parser=lambda x: [int(ch) for ch in x.split(‘,’)])\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: potentially wrong underline length... \nExample \n-------- in \nExample\n--------...\n  else: warn(msg)\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Example\n  else: warn(msg)\n\nsource\n\n\narr_to_dict\n\n arr_to_dict (arr)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\narr\n\n\n\n\nReturns\ndict\nnumpy array or list of lists (tuple of tuples)\n\n\n\n\nassert arr_to_dict([[1,2,3]]) == {(0, 0): 1, (0, 1): 2, (0, 2): 3}\nassert arr_to_dict([[1,2], [3,4]]) == {(0, 0): 1, (0, 1): 2, (1, 0): 3, (1, 1): 4}\nassert arr_to_dict(((1,2), (3,4))) == {(0, 0): 1, (0, 1): 2, (1, 0): 3, (1, 1): 4}\nassert arr_to_dict([['a','b'],['c','#']]) == {(0, 0): 'a', (0, 1): 'b', (1, 0): 'c', (1, 1): '#'}\n\n\nsource\n\n\ngrid_to_dict\n\n grid_to_dict (grid)\n\n\nassert grid_to_dict([[1,2,3],[4,5,6]]) == {(0, 0): 1, (0, 1): 2, (0, 2): 3, (1, 0): 4, (1, 1): 5, (1, 2): 6}\nassert grid_to_dict('1r3\\n456') == {(0, 0): '1', (0, 1): 'r', (0, 2): '3', (1, 0): '4', (1, 1): '5', (1, 2): '6'}\n\n\nsource\n\n\nneighbors\n\n neighbors (i, diag=False, inc_self=False)\n\ndetermine the neighbors, returns a set with neighboring tuples {(0,1)} if inc_self: returns self in results if diag: return diagonal moves as well\n\n# 4 and 5 tuples\nassert neighbors((0,0), inc_self=False, diag=False) == {(0, 1), (0, -1), (1, 0), (-1, 0)}\nassert neighbors((0,0), inc_self=True, diag=False) == {(0, 1), (0, -1), (1, 0), (-1, 0), (0, 0)}\n# # 8 and 9 tuples\nassert neighbors((0,0), inc_self=False, diag=True) == {(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)}\nassert neighbors((0,0), inc_self=True, diag=True) == {(1, 1), (1, -1), (1, 0), (0, 1), (0, -1), (0, 0), (-1, 1), (-1, -1), (-1, 0)}\n\n\nsource\n\n\narr_neighbors\n\n arr_neighbors (arr, diag=False, inc_self=False)\n\nReturns a dictionary with index: set of neighbor indices Parameters: diag to include diagonal neighbors, inc_self to include self in result list Usage: for index, neighbor_indices in aoc.arr_neighbors(arr).items():\n\na = np.arange(9).reshape(3,3).astype(object)\nprint(a)\narr_neighbors(a)\n\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n\n\n{(0, 0): {(0, 1), (1, 0)},\n (0, 1): {(0, 0), (0, 2), (1, 1)},\n (0, 2): {(0, 1), (1, 2)},\n (1, 0): {(0, 0), (1, 1), (2, 0)},\n (1, 1): {(0, 1), (1, 0), (1, 2), (2, 1)},\n (1, 2): {(0, 2), (1, 1), (2, 2)},\n (2, 0): {(1, 0), (2, 1)},\n (2, 1): {(1, 1), (2, 0), (2, 2)},\n (2, 2): {(1, 2), (2, 1)}}\n\n\n\narr_neighbors([[1,2,3],[3,4,4]])\n\n{(0, 0): {(0, 1), (1, 0)},\n (0, 1): {(0, 0), (0, 2), (1, 1)},\n (0, 2): {(0, 1), (1, 2)},\n (1, 0): {(0, 0), (1, 1)},\n (1, 1): {(0, 1), (1, 0), (1, 2)},\n (1, 2): {(0, 2), (1, 1)}}\n\n\n\nsource\n\n\niterate\n\n iterate (grid)\n\n\nsource\n\n\ndimensions\n\n dimensions (obj, axis=0)\n\ntakes an iterable of iterables and returns a namedtuple with minima, maxima and range for example a 2d numpy array dim.min, dim.max and dim.range\n\nmatrix = [[1,2,3],[10,9,8]]\nassert dimensions(matrix) == Dim(min=(1, 2, 3), max=(10, 9, 8), range=(9, 7, 5))\nassert dimensions(matrix, axis=1) == Dim(min=(1, 8), max=(3, 10), range=(2,2))\nassert dimensions(np.array(matrix)) == Dim(min=(1, 2, 3), max=(10, 9, 8), range=(9, 7, 5))\n\n\nsource\n\n\npositive\n\n positive (*args)\n\ntakes 1 or multiple lists of n coordinates and returns it normalized (getting rid of negatives) Only works along rows! (axis=0)\npositive() will only make changes along axis where negative values are detected\n\nassert positive([(0,0,-4),(0,-10,0),(0,0,0)]) == [(0, 10, 0), (0, 0, 4), (0, 10, 4)]\n\n\nsource\n\n\nmanhattan\n\n manhattan (a, b)\n\n\nassert manhattan((10,10),(-1,11)) == 12\nassert manhattan((0,5),(-1,8)) == 4\nassert manhattan((10,10,10),(-1,11,12)) == 14\nassert manhattan((-1,-2,-3,-4),(3,6,2,-1)) == 20\n\n\nsource\n\n\nconv1d\n\n conv1d (arr, conv_shape, mode='same', padding=None, pad_dir='center')\n\nReturns a list of kernel views of a string or list mode == ‘valid’: returns only results where the kernel fits mode == ‘same’: return the same amount of items as original when mode ==‘same’, default padding is the outer value\n\nconv1d(\"12345\",3,mode='valid') == ['123', '234', '345']\nconv1d(\"12345\",3,mode='same')\n# conv1d(\"12345\",2,mode='valid') == ['123', '234', '345'])\n\nnot fully checked yet valid\nnot fully checked yet same\n\n\n['112', '123', '234', '345', '451']\n\n\n\nsource\n\n\nconv2d\n\n conv2d (arr, conv_shape, mode='valid', padding=None, pad_dir='center')\n\nReturns a list of kernel views of a string or list mode == ‘valid’: returns only results where the kernel fits mode == ‘same’: return the same amount of items as original when mode ==‘same’, default padding is the outer value\n\nconv2d(np.array([np.arange(9).reshape(3,3)]), conv_shape=2)\n\nnot fully checked yet\n\n\n[]\n\n\n\nsource\n\n\nrotate\n\n rotate (locs, flip=False)\n\nRotates a given pattern by 90 degrees (like a puzzle piece) when flip=True, also piece around leading to maximum of 8 options\n\nlocs = [(0,0), (0,1), (0,2),(1,2)]\nassert len({frozenset(s) for s in rotate(locs, flip=True)}) == 8\nlocs = [(0,0), (0,1)]\nassert len({frozenset(s) for s in rotate(locs, flip=True)}) == 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "aocutils",
    "section": "",
    "text": "This file will become your README and also the index of your documentation!"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "aocutils",
    "section": "Install",
    "text": "Install\npip install -e .\nThis installs locally and refreshes changes to the codebase automatically"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "aocutils",
    "section": "How to use",
    "text": "How to use\nImport the functions from the submodules\n\nfrom aocutils.grid import arr_to_dict\narr_to_dict([('a', 1), ('b',5)])\n\n{(0, 0): 'a', (0, 1): 1, (1, 0): 'b', (1, 1): 5}\n\n\nThese are all the imports that could come in handy for AoC\nfrom bisect import bisect_left from collections import namedtuple, deque, defaultdict from functools import reduce import heapq from itertools import chain from math import sqrt, gcd, comb import operator import re import string\nimport networkx as nx import numpy as np import pandas as pd\n\n\nfrom aocutils.common import copy_func, patch_to, patch, to_int, ints, flatten, zippify, multidict, rev, data, quantify, atom, atoms, list_atoms, list_multiply, mapt\nfrom aocutils.grid import gridneigh, arr_to_dict, grid_to_dict, neighbors, arr_neighbors, iterate, Dim, dimensions, positive, manhattan, conv1d, conv2d, rotate\nfrom aocutils.maze import graphparse, bfs, dijkstra, get_path, dfs\nfrom aocutils.math import gcd, factors, lcm, crt, mul_inv, Segment, lis, angle, all_combinations, all_permutations, mst\nfrom aocutils.special import md5, binarysearch, deduce_matches, find_specific_pattern, find_repeat, find_cycle, UnionFind, Octree, LazySegmentTree, Trie\nfrom aocutils.visuals import visualize_graph, labelize, animate_grid, plot\nfrom aocutils.cfg import CFG\nfrom aocutils.earley import State, Earley\nfrom aocutils.shunting import ShuntingYard\n\n\nAnd links to useful docs:\nDocs on aocutils\nDocs on nbdev"
  },
  {
    "objectID": "math.html",
    "href": "math.html",
    "title": "Mathy functions",
    "section": "",
    "text": "source\n\nfactors\n\n factors (n)\n\nreturn set of divisors of a number\n\nassert factors(20) == {1, 2, 4, 5, 10, 20}\n\n\nsource\n\n\nlcm\n\n lcm (iterable)\n\n\nsource\n\n\ngcd\n\n gcd (a, b)\n\n\nassert gcd(12, 8) == 4\nassert gcd(12, 4) == 4\nassert gcd(12, 12) == 12\nassert lcm([4, 6, 7]) == 84\nassert lcm([10, 15]) == 30\nassert lcm([5, 7, 11]) == 385\n\n\ndef power(a, b, M=None):\n    # computes a**b. Actually python pow does this with optional third argument\n    res = 1\n    while b:\n        if b % 2 == 1:\n            res = (res * a) % M if M else res * a\n            print(\"res\", res)\n        a *= a\n        b //= 2\n    return res\n\n\nassert power(3, 2) == pow(3,2)\n\nres 9\n\n\n\nsource\n\n\ncrt\n\n crt (remainders, moduli)\n\nChinese remainder theorem\n\n# https://adventofcode.com/2020/day/13\n\nrests, mods = (\n    [0, -27, -37, -45, -54, -56, -66, -68, -81],\n    [37, 41, 433, 23, 17, 19, 29, 593, 13],\n)\nassert crt(rests, mods) == (600691418730595, 1090937521514009)\n\ntimes = [0,-1,-4,-6,-7]\nmods = [7,13,59,31,19]\nassert crt(times, mods)[0] == 1068781\n\nReturning remainder and modulo. First valid number is the remainder\nReturning remainder and modulo. First valid number is the remainder\n\n\n\nassert crt((3, 5, 2), (4, 6, 5)) == (47, 60)\nassert crt((1, 0, 1, 3), (4, 3, 5, 7)) == (381, 420)\nassert crt((1, 1, 0, 3), (4, 5, 3, 7)) == (381, 420)\n\nReturning remainder and modulo. First valid number is the remainder\nReturning remainder and modulo. First valid number is the remainder\nReturning remainder and modulo. First valid number is the remainder\n\n\n\nsource\n\n\nmul_inv\n\n mul_inv (a, b)\n\n\nassert mul_inv(17, 29) == 12\nassert mul_inv(40, 7) == 3\npow(17,-1,29), pow(40,-1,7)\n\n(12, 3)\n\n\n\nsource\n\n\nSegment\n\n Segment (array, func)\n\nInitialize self. See help(type(self)) for accurate signature.\n\narray = [1, 2, 3, 0, 10, 100, 5, 5]\ns = Segment(array, min)\n\n\ns.data\n\n[0, 0, 0, 5, 1, 0, 10, 5, 1, 2, 3, 0, 10, 100, 5, 5]\n\n\n\ns.update(7, 2)\ns.data\n\n[0, 0, 0, 2, 1, 0, 10, 2, 1, 2, 3, 0, 10, 100, 5, 2]\n\n\n\ndef lis(nums, increase=True):\n    \"\"\"\n    Computes the length of the longest in(de)creasing subsequence\n    Implements https://en.wikipedia.org/wiki/Longest_increasing_subsequence\n    I don't include it in the module since it's more complex than the next implementation\n    although it has a better time complexity\n    \"\"\"\n    previousidx = [-1] * len(nums)\n    currentidx = []\n    current = []\n\n    for i, num in enumerate(nums):\n        idx = bisect_left(current, num)\n        previousidx[i] = currentidx[idx - 1] if idx else -1\n        if idx == len(current):\n            current.append(num)\n            currentidx.append(i)\n        else:\n            current[idx] = num\n            currentidx[idx] = i\n        print(current, currentidx, previousidx)\n    \n    idxs = [currentidx[-1]]\n    while previousidx[idxs[-1]] != -1:\n        idxs.append(previousidx[idxs[-1]])\n    return list(reversed([nums[idx] for idx in idxs]))\n\nnums = [2, 8, 9, 5, 6, 7, 1]\nlis(nums)\n\n[2] [0] [-1, -1, -1, -1, -1, -1, -1]\n[2, 8] [0, 1] [-1, 0, -1, -1, -1, -1, -1]\n[2, 8, 9] [0, 1, 2] [-1, 0, 1, -1, -1, -1, -1]\n[2, 5, 9] [0, 3, 2] [-1, 0, 1, 0, -1, -1, -1]\n[2, 5, 6] [0, 3, 4] [-1, 0, 1, 0, 3, -1, -1]\n[2, 5, 6, 7] [0, 3, 4, 5] [-1, 0, 1, 0, 3, 4, -1]\n[1, 5, 6, 7] [6, 3, 4, 5] [-1, 0, 1, 0, 3, 4, -1]\n\n\n[2, 5, 6, 7]\n\n\n\nsource\n\n\nlis\n\n lis (nums, func=<built-in function ge>)\n\nChange the func to change it into longest decreasing subsequence. Or other Default is operator.ge, which represents longest strictly increasing subsequence\n\nsource\n\n\nangle\n\n angle (a, b)\n\n\na = (1,1)\nb = (2,-1)\nangle(a,b)\n\n153.434948822922\n\n\n\nnums = [2, 8, 9, 5,5, 6, 7, 1]\nlis(nums, operator.ge)\n\n[2, 5, 5, 6, 7]\n\n\n\nsource\n\n\nall_combinations\n\n all_combinations (it, start=None, end=None)\n\nReturns all combinations from start to end (inclusive). Defaults to 1, len(end)\n\nlist(all_combinations([1,2,3],1,3))\n\n[(1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\n\n\n\nsource\n\n\nall_permutations\n\n all_permutations (it, start=None, end=None)\n\n\nassert list(all_combinations(range(4),2,3)) == [(0, 1),\n (0, 2),\n (0, 3),\n (1, 2),\n (1, 3),\n (2, 3),\n (0, 1, 2),\n (0, 1, 3),\n (0, 2, 3),\n (1, 2, 3)]\n\n\nsource\n\n\nmst\n\n mst (edges)\n\n\nedges = [(1, 2, 3), (1, 3, 5), (2, 3, 1), (0, 1, 10)]\nassert mst(edges) == 14"
  },
  {
    "objectID": "context_free_grammar.html",
    "href": "context_free_grammar.html",
    "title": "Context free grammar",
    "section": "",
    "text": "source\n\nCFG\n\n CFG (grammar, terminals=None)\n\nTakes a grammer as dict with tuple of options as values. Terminal values should not be in a tuple but as a string Usage: cfg = CFG(grammar_dict) reverse as optional parameter when k,v are reversed converts the grammar to Chomsky Normal form by taking care of options, unit productions and triplets cfg.solve(messages_list) returns dict of substrings with possible rules to make them\n\ngrammar = {'0': (('4', '1', '5'),),\n '1': (('2', '3'), ('3', '2')),\n '2': (('4', '4'), ('5', '5')),\n '3': (('4', '5'), ('5', '4')),\n '4': (('a',),),\n '5': (('b',),)}\n\nmessages = ['ababbb', 'bababa', 'abbbab', 'aaabbb', 'aaaabbb']\ncfg = CFG(grammar, terminals = {'a', 'b'})\nout = cfg.solve(messages)\nassert sum([1 for m in messages if (m in out) and ('0' in out[m])]) == 2\n\n0 (('4', '1', '5'),) option ('4', '1', '5')\n1 (('2', '3'), ('3', '2')) option ('2', '3')\n1 (('2', '3'), ('3', '2')) option ('3', '2')\n2 (('4', '4'), ('5', '5')) option ('4', '4')\n2 (('4', '4'), ('5', '5')) option ('5', '5')\n3 (('4', '5'), ('5', '4')) option ('4', '5')\n3 (('4', '5'), ('5', '4')) option ('5', '4')\n4 (('a',),) option ('a',)\n5 (('b',),) option ('b',)\noutcomes after grammar defaultdict(<class 'set'>, {'a': {'4'}, 'b': {'5'}})\n0 messages done\nfinished all messages, returning dict\n\n\n\n# https://adventofcode.com/2020/day/19\nrules, messages = open('cfgloop.txt').read().split('\\n\\n')\ngrammar = {}\n\nfor rule in rules.split('\\n'):\n    num, makefrom = rule.split(': ')\n    makefrom = makefrom.replace('\"', '')\n    makefrom = tuple(makefrom.split(' | '))\n    makefrom = tuple(tuple(option.split()) for option in makefrom)\n    grammar[num] = makefrom\n    \nmessages = messages.split('\\n')\ncfg = CFG(grammar, terminals = {'a', 'b'})\nres = cfg.solve(messages)\nassert sum('0' in v and k in messages for k,v in cfg.outcomes.items()) == 243\n\n97 (('138', '57'), ('12', '83')) option ('138', '57')\n97 (('138', '57'), ('12', '83')) option ('12', '83')\n131 (('20', '83'), ('74', '57')) option ('20', '83')\n131 (('20', '83'), ('74', '57')) option ('74', '57')\n7 (('57', '110'), ('83', '51')) option ('57', '110')\n7 (('57', '110'), ('83', '51')) option ('83', '51')\n48 (('17', '83'), ('56', '57')) option ('17', '83')\n48 (('17', '83'), ('56', '57')) option ('56', '57')\n2 (('83', '57'),) option ('83', '57')\n40 (('57', '101'), ('83', '93')) option ('57', '101')\n40 (('57', '101'), ('83', '93')) option ('83', '93')\n16 (('12', '83'), ('47', '57')) option ('12', '83')\n16 (('12', '83'), ('47', '57')) option ('47', '57')\n42 (('15', '83'), ('66', '57')) option ('15', '83')\n42 (('15', '83'), ('66', '57')) option ('66', '57')\n62 (('83', '134'), ('57', '18')) option ('83', '134')\n62 (('83', '134'), ('57', '18')) option ('57', '18')\n55 (('124', '57'), ('45', '83')) option ('124', '57')\n55 (('124', '57'), ('45', '83')) option ('45', '83')\n1 (('57', '116'), ('83', '93')) option ('57', '116')\n1 (('57', '116'), ('83', '93')) option ('83', '93')\n63 (('83', '1'), ('57', '32')) option ('83', '1')\n63 (('83', '1'), ('57', '32')) option ('57', '32')\n83 (('a',),) option ('a',)\n72 (('57', '83'), ('83', '83')) option ('57', '83')\n72 (('57', '83'), ('83', '83')) option ('83', '83')\n18 (('83', '57'), ('57', '83')) option ('83', '57')\n18 (('83', '57'), ('57', '83')) option ('57', '83')\n67 (('90', '83'), ('99', '57')) option ('90', '83')\n67 (('90', '83'), ('99', '57')) option ('99', '57')\n91 (('83', '108'), ('57', '72')) option ('83', '108')\n91 (('83', '108'), ('57', '72')) option ('57', '72')\n8 (('42',), ('42', '8')) option ('42',)\n8 (('42',), ('42', '8')) option ('42', '8')\n116 (('83', '18'), ('57', '72')) option ('83', '18')\n116 (('83', '18'), ('57', '72')) option ('57', '72')\n41 (('57', '83'),) option ('57', '83')\n130 (('57', '84'), ('83', '50')) option ('57', '84')\n130 (('57', '84'), ('83', '50')) option ('83', '50')\n26 (('57', '12'), ('83', '124')) option ('57', '12')\n26 (('57', '12'), ('83', '124')) option ('83', '124')\n103 (('134', '57'), ('45', '83')) option ('134', '57')\n103 (('134', '57'), ('45', '83')) option ('45', '83')\n39 (('83', '18'), ('57', '138')) option ('83', '18')\n39 (('83', '18'), ('57', '138')) option ('57', '138')\n46 (('83', '47'), ('57', '138')) option ('83', '47')\n46 (('83', '47'), ('57', '138')) option ('57', '138')\n129 (('57', '138'), ('83', '108')) option ('57', '138')\n129 (('57', '138'), ('83', '108')) option ('83', '108')\n58 (('108', '57'), ('72', '83')) option ('108', '57')\n58 (('108', '57'), ('72', '83')) option ('72', '83')\n138 (('57', '57'), ('83', '57')) option ('57', '57')\n138 (('57', '57'), ('83', '57')) option ('83', '57')\n49 (('58', '57'), ('26', '83')) option ('58', '57')\n49 (('58', '57'), ('26', '83')) option ('26', '83')\n133 (('57', '79'), ('83', '13')) option ('57', '79')\n133 (('57', '79'), ('83', '13')) option ('83', '13')\n125 (('83', '124'), ('57', '72')) option ('83', '124')\n125 (('83', '124'), ('57', '72')) option ('57', '72')\n123 (('105', '83'), ('134', '57')) option ('105', '83')\n123 (('105', '83'), ('134', '57')) option ('134', '57')\n128 (('45', '57'), ('2', '83')) option ('45', '57')\n128 (('45', '57'), ('2', '83')) option ('2', '83')\n24 (('83', '117'), ('57', '76')) option ('83', '117')\n24 (('83', '117'), ('57', '76')) option ('57', '76')\n86 (('57', '12'), ('83', '85')) option ('57', '12')\n86 (('57', '12'), ('83', '85')) option ('83', '85')\n76 (('107', '57'), ('123', '83')) option ('107', '57')\n76 (('107', '57'), ('123', '83')) option ('123', '83')\n70 (('83', '37'), ('57', '112')) option ('83', '37')\n70 (('83', '37'), ('57', '112')) option ('57', '112')\n51 (('83', '45'), ('57', '54')) option ('83', '45')\n51 (('83', '45'), ('57', '54')) option ('57', '54')\n37 (('47', '57'), ('72', '83')) option ('47', '57')\n37 (('47', '57'), ('72', '83')) option ('72', '83')\n9 (('57', '124'), ('83', '105')) option ('57', '124')\n9 (('57', '124'), ('83', '105')) option ('83', '105')\n61 (('57', '19'), ('83', '47')) option ('57', '19')\n61 (('57', '19'), ('83', '47')) option ('83', '47')\n75 (('108', '83'), ('105', '57')) option ('108', '83')\n75 (('108', '83'), ('105', '57')) option ('105', '57')\n120 (('83', '105'), ('57', '18')) option ('83', '105')\n120 (('83', '105'), ('57', '18')) option ('57', '18')\n124 (('57', '57'), ('83', '83')) option ('57', '57')\n124 (('57', '57'), ('83', '83')) option ('83', '83')\n4 (('41', '83'), ('12', '57')) option ('41', '83')\n4 (('41', '83'), ('12', '57')) option ('12', '57')\n0 (('8', '11'),) option ('8', '11')\n27 (('83', '41'),) option ('83', '41')\n89 (('57', '29'), ('83', '40')) option ('57', '29')\n89 (('57', '29'), ('83', '40')) option ('83', '40')\n111 (('54', '83'), ('18', '57')) option ('54', '83')\n111 (('54', '83'), ('18', '57')) option ('18', '57')\n12 (('57', '57'),) option ('57', '57')\n53 (('57', '52'), ('83', '73')) option ('57', '52')\n53 (('57', '52'), ('83', '73')) option ('83', '73')\n90 (('83', '130'), ('57', '48')) option ('83', '130')\n90 (('83', '130'), ('57', '48')) option ('57', '48')\n59 (('55', '83'), ('125', '57')) option ('55', '83')\n59 (('55', '83'), ('125', '57')) option ('125', '57')\n21 (('45', '83'), ('19', '57')) option ('45', '83')\n21 (('45', '83'), ('19', '57')) option ('19', '57')\n30 (('83', '7'), ('57', '70')) option ('83', '7')\n30 (('83', '7'), ('57', '70')) option ('57', '70')\n88 (('41', '57'), ('2', '83')) option ('41', '57')\n88 (('41', '57'), ('2', '83')) option ('2', '83')\n71 (('60', '57'), ('44', '83')) option ('60', '57')\n71 (('60', '57'), ('44', '83')) option ('44', '83')\n74 (('98', '57'), ('14', '83')) option ('98', '57')\n74 (('98', '57'), ('14', '83')) option ('14', '83')\n87 (('131', '57'), ('30', '83')) option ('131', '57')\n87 (('131', '57'), ('30', '83')) option ('30', '83')\n73 (('49', '83'), ('94', '57')) option ('49', '83')\n73 (('49', '83'), ('94', '57')) option ('94', '57')\n82 (('83', '41'), ('57', '138')) option ('83', '41')\n82 (('83', '41'), ('57', '138')) option ('57', '138')\n35 (('83', '22'), ('57', '89')) option ('83', '22')\n35 (('83', '22'), ('57', '89')) option ('57', '89')\n136 (('57', '105'), ('83', '108')) option ('57', '105')\n136 (('57', '105'), ('83', '108')) option ('83', '108')\n94 (('83', '129'), ('57', '86')) option ('83', '129')\n94 (('83', '129'), ('57', '86')) option ('57', '86')\n65 (('83', '72'), ('57', '108')) option ('83', '72')\n65 (('83', '72'), ('57', '108')) option ('57', '108')\n105 (('95', '95'),) option ('95', '95')\n77 (('83', '78'), ('57', '92')) option ('83', '78')\n77 (('83', '78'), ('57', '92')) option ('57', '92')\n19 (('83', '83'),) option ('83', '83')\n92 (('95', '138'),) option ('95', '138')\n104 (('18', '83'), ('124', '57')) option ('18', '83')\n104 (('18', '83'), ('124', '57')) option ('124', '57')\n43 (('83', '102'), ('57', '103')) option ('83', '102')\n43 (('83', '102'), ('57', '103')) option ('57', '103')\n99 (('115', '57'), ('23', '83')) option ('115', '57')\n99 (('115', '57'), ('23', '83')) option ('23', '83')\n135 (('83', '93'), ('57', '97')) option ('83', '93')\n135 (('83', '93'), ('57', '97')) option ('57', '97')\n23 (('81', '57'), ('69', '83')) option ('81', '57')\n23 (('81', '57'), ('69', '83')) option ('69', '83')\n115 (('83', '132'), ('57', '25')) option ('83', '132')\n115 (('83', '132'), ('57', '25')) option ('57', '25')\n110 (('85', '57'), ('18', '83')) option ('85', '57')\n110 (('85', '57'), ('18', '83')) option ('18', '83')\n52 (('83', '3'), ('57', '137')) option ('83', '3')\n52 (('83', '3'), ('57', '137')) option ('57', '137')\n3 (('68', '57'), ('106', '83')) option ('68', '57')\n3 (('68', '57'), ('106', '83')) option ('106', '83')\n15 (('35', '83'), ('53', '57')) option ('35', '83')\n15 (('35', '83'), ('53', '57')) option ('53', '57')\n106 (('41', '83'), ('85', '57')) option ('41', '83')\n106 (('41', '83'), ('85', '57')) option ('85', '57')\n60 (('113', '83'), ('24', '57')) option ('113', '83')\n60 (('113', '83'), ('24', '57')) option ('24', '57')\n93 (('12', '57'),) option ('12', '57')\n66 (('87', '83'), ('133', '57')) option ('87', '83')\n66 (('87', '83'), ('133', '57')) option ('133', '57')\n34 (('55', '83'), ('28', '57')) option ('55', '83')\n34 (('55', '83'), ('28', '57')) option ('28', '57')\n80 (('83', '41'), ('57', '85')) option ('83', '41')\n80 (('83', '41'), ('57', '85')) option ('57', '85')\n28 (('72', '57'), ('124', '83')) option ('72', '57')\n28 (('72', '57'), ('124', '83')) option ('124', '83')\n45 (('83', '57'), ('83', '83')) option ('83', '57')\n45 (('83', '57'), ('83', '83')) option ('83', '83')\n38 (('58', '57'), ('61', '83')) option ('58', '57')\n38 (('58', '57'), ('61', '83')) option ('61', '83')\n25 (('4', '83'), ('62', '57')) option ('4', '83')\n25 (('4', '83'), ('62', '57')) option ('62', '57')\n14 (('57', '124'), ('83', '138')) option ('57', '124')\n14 (('57', '124'), ('83', '138')) option ('83', '138')\n29 (('136', '83'), ('121', '57')) option ('136', '83')\n29 (('136', '83'), ('121', '57')) option ('121', '57')\n64 (('18', '83'), ('19', '57')) option ('18', '83')\n64 (('18', '83'), ('19', '57')) option ('19', '57')\n81 (('122', '57'), ('9', '83')) option ('122', '57')\n81 (('122', '57'), ('9', '83')) option ('9', '83')\n137 (('33', '83'), ('91', '57')) option ('33', '83')\n137 (('33', '83'), ('91', '57')) option ('91', '57')\n118 (('100', '57'), ('120', '83')) option ('100', '57')\n118 (('100', '57'), ('120', '83')) option ('120', '83')\n98 (('108', '57'), ('41', '83')) option ('108', '57')\n98 (('108', '57'), ('41', '83')) option ('41', '83')\n114 (('83', '72'), ('57', '45')) option ('83', '72')\n114 (('83', '72'), ('57', '45')) option ('57', '45')\n132 (('128', '57'), ('75', '83')) option ('128', '57')\n132 (('128', '57'), ('75', '83')) option ('75', '83')\n107 (('83', '134'), ('57', '72')) option ('83', '134')\n107 (('83', '134'), ('57', '72')) option ('57', '72')\n50 (('123', '83'), ('114', '57')) option ('123', '83')\n50 (('123', '83'), ('114', '57')) option ('114', '57')\n78 (('41', '83'), ('19', '57')) option ('41', '83')\n78 (('41', '83'), ('19', '57')) option ('19', '57')\n79 (('57', '118'), ('83', '77')) option ('57', '118')\n79 (('57', '118'), ('83', '77')) option ('83', '77')\n32 (('62', '57'), ('109', '83')) option ('62', '57')\n32 (('62', '57'), ('109', '83')) option ('109', '83')\n10 (('59', '83'), ('43', '57')) option ('59', '83')\n10 (('59', '83'), ('43', '57')) option ('43', '57')\n119 (('39', '57'), ('111', '83')) option ('39', '57')\n119 (('39', '57'), ('111', '83')) option ('111', '83')\n36 (('57', '134'), ('83', '41')) option ('57', '134')\n36 (('57', '134'), ('83', '41')) option ('83', '41')\n6 (('83', '2'), ('57', '138')) option ('83', '2')\n6 (('83', '2'), ('57', '138')) option ('57', '138')\n69 (('126', '83'), ('27', '57')) option ('126', '83')\n69 (('126', '83'), ('27', '57')) option ('27', '57')\n57 (('b',),) option ('b',)\n113 (('5', '83'), ('38', '57')) option ('5', '83')\n113 (('5', '83'), ('38', '57')) option ('38', '57')\n112 (('138', '83'), ('105', '57')) option ('138', '83')\n112 (('138', '83'), ('105', '57')) option ('105', '57')\n33 (('108', '83'), ('45', '57')) option ('108', '83')\n33 (('108', '83'), ('45', '57')) option ('45', '57')\n127 (('41', '57'), ('12', '83')) option ('41', '57')\n127 (('41', '57'), ('12', '83')) option ('12', '83')\n22 (('83', '34'), ('57', '119')) option ('83', '34')\n22 (('83', '34'), ('57', '119')) option ('57', '119')\n20 (('57', '127'), ('83', '80')) option ('57', '127')\n20 (('57', '127'), ('83', '80')) option ('83', '80')\n85 (('95', '57'), ('57', '83')) option ('95', '57')\n85 (('95', '57'), ('57', '83')) option ('57', '83')\n68 (('134', '57'), ('19', '83')) option ('134', '57')\n68 (('134', '57'), ('19', '83')) option ('19', '83')\n44 (('83', '63'), ('57', '10')) option ('83', '63')\n44 (('83', '63'), ('57', '10')) option ('57', '10')\n47 (('83', '95'), ('57', '57')) option ('83', '95')\n47 (('83', '95'), ('57', '57')) option ('57', '57')\n54 (('57', '57'), ('57', '83')) option ('57', '57')\n54 (('57', '57'), ('57', '83')) option ('57', '83')\n96 (('36', '57'), ('21', '83')) option ('36', '57')\n96 (('36', '57'), ('21', '83')) option ('21', '83')\n84 (('98', '57'), ('46', '83')) option ('98', '57')\n84 (('98', '57'), ('46', '83')) option ('46', '83')\n117 (('83', '16'), ('57', '65')) option ('83', '16')\n117 (('83', '16'), ('57', '65')) option ('57', '65')\n95 (('83',), ('57',)) option ('83',)\n95 (('83',), ('57',)) option ('57',)\n122 (('18', '83'), ('41', '57')) option ('18', '83')\n122 (('18', '83'), ('41', '57')) option ('41', '57')\n101 (('83', '41'), ('57', '72')) option ('83', '41')\n101 (('83', '41'), ('57', '72')) option ('57', '72')\n121 (('134', '57'), ('108', '83')) option ('134', '57')\n121 (('134', '57'), ('108', '83')) option ('108', '83')\n56 (('82', '83'), ('6', '57')) option ('82', '83')\n56 (('82', '83'), ('6', '57')) option ('6', '57')\n17 (('83', '88'), ('57', '93')) option ('83', '88')\n17 (('83', '88'), ('57', '93')) option ('57', '93')\n108 (('57', '95'), ('83', '83')) option ('57', '95')\n108 (('57', '95'), ('83', '83')) option ('83', '83')\n109 (('134', '83'), ('124', '57')) option ('134', '83')\n109 (('134', '83'), ('124', '57')) option ('124', '57')\n134 (('95', '83'), ('83', '57')) option ('95', '83')\n134 (('95', '83'), ('83', '57')) option ('83', '57')\n5 (('104', '83'), ('64', '57')) option ('104', '83')\n5 (('104', '83'), ('64', '57')) option ('64', '57')\n100 (('41', '83'), ('138', '57')) option ('41', '83')\n100 (('41', '83'), ('138', '57')) option ('138', '57')\n126 (('54', '83'), ('45', '57')) option ('54', '83')\n126 (('54', '83'), ('45', '57')) option ('45', '57')\n11 (('42', '31'), ('42', '11', '31')) option ('42', '31')\n11 (('42', '31'), ('42', '11', '31')) option ('42', '11', '31')\n13 (('57', '135'), ('83', '96')) option ('57', '135')\n13 (('57', '135'), ('83', '96')) option ('83', '96')\n31 (('83', '71'), ('57', '67')) option ('83', '71')\n31 (('83', '71'), ('57', '67')) option ('57', '67')\n102 (('19', '57'), ('72', '83')) option ('19', '57')\n102 (('19', '57'), ('72', '83')) option ('72', '83')\noutcomes after grammar defaultdict(<class 'set'>, {'a': {'95', '83'}, 'b': {'95', '57'}})\n0 messages done\n1000 messages done\n2000 messages done\n3000 messages done\nfinished all messages, returning dict\n\n\n\n# https://adventofcode.com/2015/day/19\nrules, mol = open('cfg2.txt', 'r').read().split('\\n\\n')\nnewrules = defaultdict(set)\nterminals = defaultdict(int)\noutcomes = defaultdict(set)\ncounter = 1\nfor line in rules.splitlines():\n    first, second = line.split(' => ')\n    molecules = tuple(re.findall('[A-Z][^A-Z]*', second))\n    if first not in terminals:\n        terminals[first] = str(counter)\n        counter += 1\n        \n    outcomes[''.join(molecules)] = {terminals[first]}\n    \n    for m in molecules:\n        if m not in terminals:\n            terminals[m] = str(counter)\n            counter += 1\n    molecules = tuple(terminals[m] for m in molecules)\n    newrules[terminals[first]].add(molecules)\nfor k,v in terminals.items():\n    newrules[v].add(k)\n\nmollie = []\nprev = ''\nfor ch in mol:\n    if ch.islower():\n        prev += ch\n    else:\n        if prev:\n            mollie.append(prev)\n        prev = ch\n    \nmollie.append(prev)\nmollie\n\n['C',\n 'Rn',\n 'Ca',\n 'Ca',\n 'Ca',\n 'Si',\n 'Rn',\n 'B',\n 'P',\n 'Ti',\n 'Mg',\n 'Ar',\n 'Si',\n 'Rn',\n 'Si',\n 'Rn',\n 'Mg',\n 'Ar',\n 'Si',\n 'Rn',\n 'Ca',\n 'F',\n 'Ar',\n 'Ti',\n 'Ti',\n 'B',\n 'Si',\n 'Th',\n 'F',\n 'Y',\n 'Ca',\n 'F',\n 'Ar',\n 'Ca',\n 'Ca',\n 'Si',\n 'Th',\n 'Ca',\n 'P',\n 'B',\n 'Si',\n 'Th',\n 'Si',\n 'Th',\n 'Ca',\n 'Ca',\n 'P',\n 'Ti',\n 'Rn',\n 'P',\n 'B',\n 'Si',\n 'Th',\n 'Rn',\n 'F',\n 'Ar',\n 'Ar',\n 'Ca',\n 'Ca',\n 'Si',\n 'Th',\n 'Ca',\n 'Si',\n 'Th',\n 'Si',\n 'Rn',\n 'Mg',\n 'Ar',\n 'Ca',\n 'P',\n 'Ti',\n 'B',\n 'P',\n 'Rn',\n 'F',\n 'Ar',\n 'Si',\n 'Th',\n 'Ca',\n 'Si',\n 'Rn',\n 'F',\n 'Ar',\n 'B',\n 'Ca',\n 'Si',\n 'Rn',\n 'Ca',\n 'P',\n 'Rn',\n 'F',\n 'Ar',\n 'P',\n 'Mg',\n 'Y',\n 'Ca',\n 'F',\n 'Ar',\n 'Ca',\n 'P',\n 'Ti',\n 'Ti',\n 'Ti',\n 'B',\n 'P',\n 'B',\n 'Si',\n 'Th',\n 'Ca',\n 'P',\n 'Ti',\n 'B',\n 'P',\n 'B',\n 'Si',\n 'Rn',\n 'F',\n 'Ar',\n 'B',\n 'P',\n 'B',\n 'Si',\n 'Rn',\n 'Ca',\n 'F',\n 'Ar',\n 'B',\n 'P',\n 'Rn',\n 'Si',\n 'Rn',\n 'F',\n 'Ar',\n 'Rn',\n 'Si',\n 'Rn',\n 'B',\n 'F',\n 'Ar',\n 'Ca',\n 'F',\n 'Ar',\n 'Ca',\n 'Ca',\n 'Ca',\n 'Si',\n 'Th',\n 'Si',\n 'Th',\n 'Ca',\n 'Ca',\n 'P',\n 'B',\n 'P',\n 'Ti',\n 'Ti',\n 'Rn',\n 'F',\n 'Ar',\n 'Ca',\n 'P',\n 'Ti',\n 'B',\n 'Si',\n 'Al',\n 'Ar',\n 'P',\n 'B',\n 'Ca',\n 'Ca',\n 'Ca',\n 'Ca',\n 'Ca',\n 'Si',\n 'Rn',\n 'Mg',\n 'Ar',\n 'Ca',\n 'Si',\n 'Th',\n 'F',\n 'Ar',\n 'Th',\n 'Ca',\n 'Si',\n 'Th',\n 'Ca',\n 'Si',\n 'Rn',\n 'Ca',\n 'F',\n 'Y',\n 'Ca',\n 'Si',\n 'Rn',\n 'F',\n 'Y',\n 'F',\n 'Ar',\n 'F',\n 'Ar',\n 'Ca',\n 'Si',\n 'Rn',\n 'F',\n 'Y',\n 'F',\n 'Ar',\n 'Ca',\n 'Si',\n 'Rn',\n 'B',\n 'P',\n 'Mg',\n 'Ar',\n 'Si',\n 'Th',\n 'P',\n 'Rn',\n 'F',\n 'Ar',\n 'Ca',\n 'Si',\n 'Rn',\n 'F',\n 'Ar',\n 'Ti',\n 'Rn',\n 'Si',\n 'Rn',\n 'F',\n 'Y',\n 'F',\n 'Ar',\n 'Ca',\n 'Si',\n 'Rn',\n 'B',\n 'F',\n 'Ar',\n 'Ca',\n 'Si',\n 'Rn',\n 'Ti',\n 'Mg',\n 'Ar',\n 'Si',\n 'Th',\n 'Ca',\n 'Si',\n 'Th',\n 'Ca',\n 'F',\n 'Ar',\n 'P',\n 'Rn',\n 'F',\n 'Ar',\n 'Si',\n 'Rn',\n 'F',\n 'Ar',\n 'Ti',\n 'Ti',\n 'Ti',\n 'Ti',\n 'B',\n 'Ca',\n 'Ca',\n 'Si',\n 'Rn',\n 'Ca',\n 'Ca',\n 'F',\n 'Y',\n 'F',\n 'Ar',\n 'Si',\n 'Th',\n 'Ca',\n 'P',\n 'Ti',\n 'B',\n 'P',\n 'Ti',\n 'B',\n 'Ca',\n 'Si',\n 'Th',\n 'Si',\n 'Rn',\n 'Mg',\n 'Ar',\n 'Ca',\n 'F']\n\n\n\nclass CYK():\n    # this one is not tested yet\n    def __init__(self, grammar, outcomes):\n        self.grammar = grammar\n        self.outcomes = outcomes\n            \n        self.finalgrammar = defaultdict(set)\n        for k,v in self.grammar.items():\n            for option in v:\n                self.finalgrammar[option].add(k)\n                \n    def pieces(self, test,l):\n        # gets all possibilities of len l out of a string\n        # assert isinstance(test, str)\n        return {''.join(test[i:i+l]) for i in range(len(test)-l+1) if ''.join(test[i:i+l]) not in self.outcomes}\n\n    def splitter(self,option):\n        # splits string into all options of two substrings\n        assert isinstance(option, str)\n        return {(option[:i], option[i:]) for i in range(1,len(option))}\n\n    def check_possible_option(self, option):\n        first = self.outcomes.get(option[0],set())\n        second = self.outcomes.get(option[1],set())\n        res = set()\n        for potential in product(first,second):\n            # print('            this is a potential', potential)\n            if potential in self.finalgrammar:\n                # print('             and found!')\n                res |= self.finalgrammar[potential]\n\n        return res\n\n    def solve(self, messages):\n        # takes a list of messages and returns all possibilities for the substrings of m\n        # print(self.outcomes)\n        for num, m in enumerate(messages):\n            print(m, len(m))\n            if num % 100 == 0: print(num*10, 'messages done')\n            for i in range(1,len(m)+1):\n                print(i)\n                for j in self.pieces(m, i):\n                    # print('  ' + j)\n                    for k in self.splitter(j):\n                        # print('    ', k)\n                        res = self.check_possible_option(k)\n                        if res:\n                            # print('      yes')\n                            self.outcomes[j] |= res # this was a bug\n        return self.outcomes\ncyk = CYK(newrules, outcomes)\ncyk.solve([mollie])\n\n['C', 'Rn', 'Ca', 'Ca', 'Ca', 'Si', 'Rn', 'B', 'P', 'Ti', 'Mg', 'Ar', 'Si', 'Rn', 'Si', 'Rn', 'Mg', 'Ar', 'Si', 'Rn', 'Ca', 'F', 'Ar', 'Ti', 'Ti', 'B', 'Si', 'Th', 'F', 'Y', 'Ca', 'F', 'Ar', 'Ca', 'Ca', 'Si', 'Th', 'Ca', 'P', 'B', 'Si', 'Th', 'Si', 'Th', 'Ca', 'Ca', 'P', 'Ti', 'Rn', 'P', 'B', 'Si', 'Th', 'Rn', 'F', 'Ar', 'Ar', 'Ca', 'Ca', 'Si', 'Th', 'Ca', 'Si', 'Th', 'Si', 'Rn', 'Mg', 'Ar', 'Ca', 'P', 'Ti', 'B', 'P', 'Rn', 'F', 'Ar', 'Si', 'Th', 'Ca', 'Si', 'Rn', 'F', 'Ar', 'B', 'Ca', 'Si', 'Rn', 'Ca', 'P', 'Rn', 'F', 'Ar', 'P', 'Mg', 'Y', 'Ca', 'F', 'Ar', 'Ca', 'P', 'Ti', 'Ti', 'Ti', 'B', 'P', 'B', 'Si', 'Th', 'Ca', 'P', 'Ti', 'B', 'P', 'B', 'Si', 'Rn', 'F', 'Ar', 'B', 'P', 'B', 'Si', 'Rn', 'Ca', 'F', 'Ar', 'B', 'P', 'Rn', 'Si', 'Rn', 'F', 'Ar', 'Rn', 'Si', 'Rn', 'B', 'F', 'Ar', 'Ca', 'F', 'Ar', 'Ca', 'Ca', 'Ca', 'Si', 'Th', 'Si', 'Th', 'Ca', 'Ca', 'P', 'B', 'P', 'Ti', 'Ti', 'Rn', 'F', 'Ar', 'Ca', 'P', 'Ti', 'B', 'Si', 'Al', 'Ar', 'P', 'B', 'Ca', 'Ca', 'Ca', 'Ca', 'Ca', 'Si', 'Rn', 'Mg', 'Ar', 'Ca', 'Si', 'Th', 'F', 'Ar', 'Th', 'Ca', 'Si', 'Th', 'Ca', 'Si', 'Rn', 'Ca', 'F', 'Y', 'Ca', 'Si', 'Rn', 'F', 'Y', 'F', 'Ar', 'F', 'Ar', 'Ca', 'Si', 'Rn', 'F', 'Y', 'F', 'Ar', 'Ca', 'Si', 'Rn', 'B', 'P', 'Mg', 'Ar', 'Si', 'Th', 'P', 'Rn', 'F', 'Ar', 'Ca', 'Si', 'Rn', 'F', 'Ar', 'Ti', 'Rn', 'Si', 'Rn', 'F', 'Y', 'F', 'Ar', 'Ca', 'Si', 'Rn', 'B', 'F', 'Ar', 'Ca', 'Si', 'Rn', 'Ti', 'Mg', 'Ar', 'Si', 'Th', 'Ca', 'Si', 'Th', 'Ca', 'F', 'Ar', 'P', 'Rn', 'F', 'Ar', 'Si', 'Rn', 'F', 'Ar', 'Ti', 'Ti', 'Ti', 'Ti', 'B', 'Ca', 'Ca', 'Si', 'Rn', 'Ca', 'Ca', 'F', 'Y', 'F', 'Ar', 'Si', 'Th', 'Ca', 'P', 'Ti', 'B', 'P', 'Ti', 'B', 'Ca', 'Si', 'Th', 'Si', 'Rn', 'Mg', 'Ar', 'Ca', 'F'] 295\n0 messages done\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n\n\ndefaultdict(set,\n            {'ThF': {'1'},\n             'ThRnFAr': {'1'},\n             'BCa': {'6'},\n             'TiB': {'6'},\n             'TiRnFAr': {'6'},\n             'Ca': {'9'},\n             'CaCa': {'7'},\n             'PB': {'7'},\n             'PRnFAr': {'7'},\n             'SiRnFYFAr': {'7'},\n             'SiRnMgAr': {'7'},\n             'SiTh': {'7'},\n             'CaF': {'3'},\n             'PMg': {'3'},\n             'SiAl': {'3'},\n             'CRnAlAr': {'14'},\n             'CRnFYFYFAr': {'14'},\n             'CRnFYMgAr': {'14'},\n             'CRnMgYFAr': {'14'},\n             'HCa': {'14'},\n             'NRnFYFAr': {'14'},\n             'NRnMgAr': {'14'},\n             'NTh': {'14'},\n             'OB': {'14'},\n             'ORnFAr': {'14'},\n             'BF': {'13'},\n             'TiMg': {'13'},\n             'CRnFAr': {'16'},\n             'HSi': {'16'},\n             'CRnFYFAr': {'17'},\n             'CRnMgAr': {'17'},\n             'HP': {'17'},\n             'NRnFAr': {'17'},\n             'OTi': {'17'},\n             'CaP': {'10'},\n             'PTi': {'10'},\n             'SiRnFAr': {'10'},\n             'CaSi': {'11'},\n             'ThCa': {'2'},\n             'BP': {'8'},\n             'TiTi': {'8'},\n             'HF': {'18'},\n             'NAl': {'18'},\n             'OMg': {'18'},\n             'TiTiTiB': {'6'},\n             'SiThCaCa': {'7'},\n             'BCaCaCa': {'6'},\n             'TiBPTi': {'8'},\n             'SiThCaF': {'3'},\n             'CaCaSiTh': {'7'},\n             'CaCaPB': {'7'},\n             'ThCaSiTh': {'2'},\n             'PTiBCa': {'7'},\n             'BCaSiTh': {'6'},\n             'PTiTiTi': {'10'},\n             'PBPTi': {'10'},\n             'CaSiThCa': {'7'},\n             'TiTiBCa': {'6'},\n             'CaCaPTi': {'10'},\n             'CaPTiB': {'7'},\n             'SiThCaSi': {'11'},\n             'SiThSiTh': {'7'},\n             'PBCaCa': {'7'},\n             'SiThCaP': {'10'},\n             'BPTiMg': {'13'},\n             'TiBPB': {'6'},\n             'PBSiTh': {'7'},\n             'CaCaCaSi': {'11'},\n             'TiBCaCa': {'6'},\n             'ThCaPB': {'2'},\n             'PTiBP': {'10'},\n             'CaCaCaCa': {'7'},\n             'TiBSiTh': {'6'},\n             'CaPTiTi': {'10'},\n             'CaSiThF': {'3'},\n             'TiTiBP': {'8'},\n             'BPTiTi': {'8'},\n             'CaPBP': {'10'},\n             'TiBSiAl': {'13'},\n             'TiTiTiTi': {'8'},\n             'BPTiB': {'6'},\n             'TiBPRnFAr': {'6'},\n             'CaPBPTiTi': {'10'},\n             'SiRnMgArCaP': {'10'},\n             'BCaCaCaCaCa': {'6'},\n             'TiTiTiTiBCa': {'6'},\n             'ThCaSiThCaF': {'1'},\n             'CaCaCaCaCaSi': {'11'},\n             'TiRnFArCaP': {'8'},\n             'PTiBPTiB': {'7'},\n             'SiThCaCaPTi': {'10'},\n             'TiBPBSiTh': {'6'},\n             'CaPTiBPB': {'7'},\n             'ThCaPBSiTh': {'2'},\n             'SiThSiRnMgAr': {'7'},\n             'CaCaSiThCaP': {'10'},\n             'SiThSiThCaCa': {'7'},\n             'SiThCaCaPB': {'7'},\n             'PTiTiRnFAr': {'7'},\n             'CaCaPBPTi': {'10'},\n             'PTiBCaSiTh': {'7'},\n             'CaPTiTiTiB': {'7'},\n             'CaSiThCaSiTh': {'7'},\n             'CaPTiBSiAl': {'3'},\n             'SiThCaPTiB': {'7'},\n             'CaPTiBPTi': {'10'},\n             'PRnFArPMg': {'3'},\n             'SiThCaSiThCa': {'7'},\n             'SiRnMgArCaSi': {'11'},\n             'CaCaSiThSiTh': {'7'},\n             'SiThPRnFAr': {'7'},\n             'PBSiRnFAr': {'10'},\n             'PBCaCaCaCa': {'7'},\n             'PRnFArSiTh': {'7'},\n             'TiBPTiBCa': {'6'},\n             'CaSiThCaPB': {'7'},\n             'TiTiTiBPB': {'6'},\n             'SiRnFArBCa': {'7'},\n             'PTiTiTiBP': {'10'},\n             'PBSiThSiTh': {'7'},\n             'CaCaSiRnMgAr': {'7'},\n             'TiTiTiBCaCa': {'6'},\n             'SiRnMgArCaF': {'3'},\n             'CaCaSiThCaSi': {'11'},\n             'PBSiThCaP': {'10'},\n             'PRnFArCaSi': {'11'},\n             'SiRnFArBP': {'10'},\n             'SiRnFArTiTi': {'10'},\n             'CaSiThCaPBSiTh': {'7'},\n             'PBSiRnFArBP': {'10'},\n             'CaCaCaCaSiRnMgAr': {'7'},\n             'PBCaCaCaCaCaSi': {'11'},\n             'SiRnFYFArCaSi': {'11'},\n             'SiRnMgArCaSiThF': {'3'},\n             'SiRnFArTiTiTiTi': {'10'},\n             'TiBPBSiRnFAr': {'8'},\n             'PTiBPTiBCaSi': {'11'},\n             'SiThPRnFArCaSi': {'11'},\n             'CaCaSiThSiThCaCa': {'7'},\n             'TiBPTiBCaSiTh': {'6'},\n             'ThCaPBSiThSiTh': {'2'},\n             'CaPTiBPRnFAr': {'7'},\n             'SiThSiThCaCaPTi': {'10'},\n             'SiThSiRnMgArCaP': {'10'},\n             'SiThSiRnMgArCaF': {'3'},\n             'SiThCaPTiBPTi': {'10'},\n             'PBPTiTiRnFAr': {'7'},\n             'TiBPBSiThCaP': {'8'},\n             'CaPTiTiTiBPB': {'7'},\n             'ThCaPTiBPTiB': {'2'},\n             'ThCaSiRnFArBCa': {'2'},\n             'TiTiTiBPBSiTh': {'6'},\n             'CaPTiBPTiBCa': {'7'},\n             'TiBPRnFArSiTh': {'6'},\n             'PRnFArSiThCaSi': {'11'},\n             'SiThCaCaPBPTi': {'10'},\n             'PBSiThCaPTiB': {'7'},\n             'SiThSiThCaCaPB': {'7'},\n             'PRnFArSiRnFAr': {'10'},\n             'BCaSiThSiRnMgAr': {'6'},\n             'PBSiThSiThCaCa': {'7'},\n             'PTiTiRnFArCaP': {'10'},\n             'CaCaSiRnMgArCaSi': {'11'},\n             'SiRnMgArCaPTiB': {'7'},\n             'SiThCaPTiBPB': {'7'},\n             'ThCaSiThSiRnMgAr': {'2'},\n             'TiRnFArCaPTiB': {'6'},\n             'PBSiThCaPTiBPB': {'7'},\n             'CaSiThCaPBSiThSiTh': {'7'},\n             'BCaCaCaCaCaSiRnMgAr': {'6'},\n             'CaCaSiThSiThCaCaPB': {'7'},\n             'SiThCaPTiBPTiBCa': {'7'},\n             'CaPTiBPRnFArSiTh': {'7'},\n             'PTiTiRnFArCaPTiB': {'7'},\n             'SiRnFArTiTiTiTiBCa': {'7'},\n             'BCaSiThSiRnMgArCaF': {'13'},\n             'CaCaCaCaSiRnMgArCaSi': {'11'},\n             'CaSiThCaSiThSiRnMgAr': {'7'},\n             'ThCaPBSiThSiThCaCa': {'2'},\n             'TiBPBSiThCaPTiB': {'6'},\n             'TiRnFArCaPTiBSiAl': {'13'},\n             'SiThSiThCaCaPBPTi': {'10'},\n             'TiBPBSiRnFArBP': {'8'},\n             'PBPTiTiRnFArCaP': {'10'},\n             'PBSiThSiThCaCaPTi': {'10'},\n             'PTiBCaSiThSiRnMgAr': {'7'},\n             'TiTiTiBPBSiThCaP': {'8'},\n             'CaPTiBPTiBCaSiTh': {'7'},\n             'PRnFArSiRnFArTiTi': {'10'},\n             'CaCaPBPTiTiRnFAr': {'7'},\n             'CaPTiBPBSiRnFAr': {'10'},\n             'CaCaSiRnMgArCaSiThF': {'3'},\n             'CaPTiTiTiBPBSiTh': {'7'},\n             'SiThSiRnMgArCaPTiB': {'7'},\n             'SiThCaPTiBPTiBCaSiTh': {'7'},\n             'PTiBCaSiThSiRnMgArCaF': {'3'},\n             'CaSiThCaPBSiThSiThCaCa': {'7'},\n             'SiThCaPTiBPBSiRnFAr': {'10'},\n             'CaPTiTiTiBPBSiThCaP': {'10'},\n             'CaSiThCaSiThSiRnMgArCaP': {'10'},\n             'SiThCaCaPBPTiTiRnFAr': {'7'},\n             'CaCaCaCaSiRnMgArCaSiThF': {'3'},\n             'SiRnMgArCaPTiBPRnFAr': {'7'},\n             'TiTiTiBPBSiThCaPTiB': {'6'},\n             'ThCaSiThSiRnMgArCaPTiB': {'2'},\n             'CaPTiBPRnFArSiThCaSi': {'11'},\n             'TiBPTiBCaSiThSiRnMgAr': {'6'},\n             'TiBPBSiThCaPTiBPB': {'6'},\n             'PRnFArSiRnFArTiTiTiTi': {'10'},\n             'CaCaSiThSiThCaCaPBPTi': {'10'},\n             'SiRnFArTiTiTiTiBCaCaSi': {'11'},\n             'CaCaPBPTiTiRnFArCaP': {'10'},\n             'CaPTiBPBSiRnFArBP': {'10'},\n             'PBPTiTiRnFArCaPTiB': {'7'},\n             'PTiTiRnFArCaPTiBSiAl': {'3'},\n             'TiTiTiBPBSiThCaPTiBPB': {'6'},\n             'BCaCaCaCaCaSiRnMgArCaSiThF': {'13'},\n             'SiThCaCaPBPTiTiRnFArCaP': {'10'},\n             'PRnFArSiRnFArTiTiTiTiBCa': {'7'},\n             'SiThCaPTiBPBSiRnFArBP': {'10'},\n             'SiThSiThCaCaPBPTiTiRnFAr': {'7'},\n             'SiRnMgArCaPTiBPRnFArSiTh': {'7'},\n             'TiBPTiBCaSiThSiRnMgArCaF': {'13'},\n             'CaCaPBPTiTiRnFArCaPTiB': {'7'},\n             'CaSiThCaSiThSiRnMgArCaPTiB': {'7'},\n             'PBSiThCaPTiBPBSiRnFAr': {'10'},\n             'CaSiThCaPBSiThSiThCaCaPTi': {'10'},\n             'CaPTiBPTiBCaSiThSiRnMgAr': {'7'},\n             'SiThSiRnMgArCaPTiBPRnFAr': {'7'},\n             'CaPTiTiTiBPBSiThCaPTiB': {'7'},\n             'PBPTiTiRnFArCaPTiBSiAl': {'3'},\n             'PRnFArSiRnFArTiTiTiTiBCaCaSi': {'11'},\n             'CaPTiTiTiBPBSiThCaPTiBPB': {'7'},\n             'SiThCaCaPBPTiTiRnFArCaPTiB': {'7'},\n             'SiThCaPTiBPTiBCaSiThSiRnMgAr': {'7'},\n             'SiRnMgArCaPTiBPRnFArSiThCaSi': {'11'},\n             'PBSiThCaPTiBPBSiRnFArBP': {'10'},\n             'CaCaPBPTiTiRnFArCaPTiBSiAl': {'3'},\n             'TiBPBSiThCaPTiBPBSiRnFAr': {'8'},\n             'SiThSiThCaCaPBPTiTiRnFArCaP': {'10'},\n             'SiThSiRnMgArCaPTiBPRnFArSiTh': {'7'},\n             'CaCaSiThSiThCaCaPBPTiTiRnFAr': {'7'},\n             'CaPTiBPTiBCaSiThSiRnMgArCaF': {'3'},\n             'ThCaSiThSiRnMgArCaPTiBPRnFAr': {'2'},\n             'SiThCaPTiBPTiBCaSiThSiRnMgArCaF': {'3'},\n             'TiBPBSiThCaPTiBPBSiRnFArBP': {'8'},\n             'ThCaSiThSiRnMgArCaPTiBPRnFArSiTh': {'2'},\n             'CaSiThCaSiThSiRnMgArCaPTiBPRnFAr': {'7'},\n             'TiTiTiBPBSiThCaPTiBPBSiRnFAr': {'8'},\n             'SiThSiThCaCaPBPTiTiRnFArCaPTiB': {'7'},\n             'SiThCaCaPBPTiTiRnFArCaPTiBSiAl': {'3'},\n             'CaCaSiThSiThCaCaPBPTiTiRnFArCaP': {'10'},\n             'SiThSiRnMgArCaPTiBPRnFArSiThCaSi': {'11'},\n             'CaSiThCaSiThSiRnMgArCaPTiBPRnFArSiTh': {'7'},\n             'TiTiTiBPBSiThCaPTiBPBSiRnFArBP': {'8'},\n             'CaCaSiThSiThCaCaPBPTiTiRnFArCaPTiB': {'7'},\n             'CaPTiTiTiBPBSiThCaPTiBPBSiRnFAr': {'10'},\n             'SiThSiThCaCaPBPTiTiRnFArCaPTiBSiAl': {'3'},\n             'CaSiThCaSiThSiRnMgArCaPTiBPRnFArSiThCaSi': {'11'},\n             'CaPTiTiTiBPBSiThCaPTiBPBSiRnFArBP': {'10'},\n             'CaCaSiThSiThCaCaPBPTiTiRnFArCaPTiBSiAl': {'3'}})"
  },
  {
    "objectID": "maze.html",
    "href": "maze.html",
    "title": "Maze algo’s",
    "section": "",
    "text": "source\n\ngraphparse\n\n graphparse (filename, parser=None, weights=False)\n\n\ngraphparse('graph.txt', parser=lambda line: [x for x in line.split()])\ngraphparse('graphdijkstra.txt', parser=lambda line: [int(x) if x.isnumeric() else x for x in line.split()], weights=True)\n\ndefaultdict(list,\n            {'a': [('b', 1), ('e', 11)],\n             'b': [('c', 2)],\n             'c': [('d', 3)],\n             'd': [('e', 4)]})\n\n\n\nsource\n\n\nbfs\n\n bfs (connections, start, goal=None, verbose=False)\n\nRequires a connections dict with tuples with neighbors per node. Or a connections function returning neighbors per node\nReturns if goal == None: return dict of locations with neighbor closest to start elif goal found: returns path to goal else: returns False\n\ndef test_bfs(input):\n    if input < 0: return (0,)\n    elif input > 25: return (25,)\n    else:\n        return (input-1, input+1, input + 20, input -20)\nbfs(test_bfs, 0,goal=10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nFalse\n\n\n\nsource\n\n\ndijkstra\n\n dijkstra (connections, start, goal=None)\n\nRequires a dict with as values a LIST of tuples (neighbor, weight) Or a function returning a list of tuples with neighbors and weights per node\nReturns if goal == None: return all paths from start elif goal found: returns path to goal else: returns False\n\ntest = graphparse('graphdijkstra.txt', parser=lambda line: [int(x) if x.isnumeric() else x for x in line.split()], weights=True)\ntest = graphparse('graphdijkstra.txt', parser=lambda line: [to_int(x)[0] for x in line.split()], weights=True)\ndijkstra(test, 'a', goal='e')\n\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\nwatch out string will be converted into list with string.split()\n\n\n(['a', 'b', 'c', 'd', 'e'], 10)\n\n\n\ntest_dict = {1:[(2,1),(5,5)],\n            2:[(1,1),(3,1)],\n            3:[(2,1),(10,10)],\n            5:[(1,1),(10,1)],\n            10:[(3,1),(5,1)]\n            }\nassert dijkstra(test_dict, 1,goal=10) == ([1, 5, 10], 6)\n\n\nsource\n\n\nget_path\n\n get_path (parents, start, goal)\n\n\nsource\n\n\ndfs\n\n dfs (graph, start)"
  },
  {
    "objectID": "datascience.html",
    "href": "datascience.html",
    "title": "Data science helpers",
    "section": "",
    "text": "source\n\nuntar_data\n\n untar_data (path, save_dir=None)\n\n\nsource\n\n\ntimeit\n\n timeit (description=None)\n\n\nsource\n\n\nsave\n\n save (data, filename)\n\n\nsource\n\n\nload\n\n load (filename)\n\n\nsource\n\n\nnan_inspect\n\n nan_inspect (df)"
  },
  {
    "objectID": "earleyparser.html",
    "href": "earleyparser.html",
    "title": "Earley Parser",
    "section": "",
    "text": "source\n\nEarley\n\n Earley (grammar)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nState\n\n State (symbol:str, rule:tuple, startidx:int, position:int,\n        predecessor:object, creator:object)\n\n\n# https://adventofcodecom/2020/day/19\nrules, messages = open('cfg.txt').read().split('\\n\\n')\ngrammar = {}\n\nfor rule in rules.split('\\n'):\n    num, makefrom = rule.split(': ')\n    makefrom = makefrom.replace('\"', '')\n    makefrom = tuple(makefrom.split(' | '))\n    makefrom = tuple(tuple(option.split()) for option in makefrom)\n    grammar[num] = makefrom\n    \nmessages = messages.split('\\n')\ns = '0'\nans = 0\near = Earley(grammar)\nfor m in messages:\n    ans += ear.parse(m,s)\nassert ans == 129\n\n\ncols = ear.parse(messages[0],s, returncols=True)\nans = ear.find(cols, deque([]), endstate = False, start=True)\near.printparse(ans)\nfor state in ans:\n    print(state, state.is_complete())\n\n 0  : ()              | ('8', '11')                    idx(0) )\n.. 8  : ()              | ('42',)                        idx(0) )\n.... 42 : ()              | ('15', '83')                   idx(0) )\n...... 15 : ()              | ('35', '83')                   idx(0) )\n........ 35 : ()              | ('57', '89')                   idx(0) )\n.......... 57 : ()              | ('b',)                         idx(0) )\n.......... 89 : ()              | ('83', '40')                   idx(1) )\n............ 83 : ()              | ('a',)                         idx(1) )\n............ 40 : ()              | ('57', '101')                  idx(2) )\n.............. 57 : ()              | ('b',)                         idx(2) )\n.............. 101: ()              | ('57', '72')                   idx(3) )\n................ 57 : ()              | ('b',)                         idx(3) )\n................ 72 : ()              | ('83', '83')                   idx(4) )\n.................. 83 : ()              | ('a',)                         idx(4) )\n.................. 83 : ()              | ('a',)                         idx(5) )\n........ 83 : ()              | ('a',)                         idx(6) )\n...... 83 : ()              | ('a',)                         idx(7) )\n.. 11 : ()              | ('42', '31')                   idx(8) )\n.... 42 : ()              | ('66', '57')                   idx(8) )\n...... 66 : ()              | ('87', '83')                   idx(8) )\n........ 87 : ()              | ('131', '57')                  idx(8) )\n.......... 131: ()              | ('74', '57')                   idx(8) )\n............ 74 : ()              | ('98', '57')                   idx(8) )\n.............. 98 : ()              | ('108', '57')                  idx(8) )\n................ 108: ()              | ('57', '95')                   idx(8) )\n.................. 57 : ()              | ('b',)                         idx(8) )\n.................. 95 : ()              | ('57',)                        idx(9) )\n.................... 57 : ()              | ('b',)                         idx(9) )\n................ 57 : ()              | ('b',)                         idx(10) )\n.............. 57 : ()              | ('b',)                         idx(11) )\n............ 57 : ()              | ('b',)                         idx(12) )\n.......... 57 : ()              | ('b',)                         idx(13) )\n........ 83 : ()              | ('a',)                         idx(14) )\n...... 57 : ()              | ('b',)                         idx(15) )\n.... 31 : ()              | ('83', '71')                   idx(16) )\n...... 83 : ()              | ('a',)                         idx(16) )\n...... 71 : ()              | ('60', '57')                   idx(17) )\n........ 60 : ()              | ('24', '57')                   idx(17) )\n.......... 24 : ()              | ('83', '117')                  idx(17) )\n............ 83 : ()              | ('a',)                         idx(17) )\n............ 117: ()              | ('83', '16')                   idx(18) )\n.............. 83 : ()              | ('a',)                         idx(18) )\n.............. 16 : ()              | ('47', '57')                   idx(19) )\n................ 47 : ()              | ('83', '95')                   idx(19) )\n.................. 83 : ()              | ('a',)                         idx(19) )\n.................. 95 : ()              | ('83',)                        idx(20) )\n.................... 83 : ()              | ('a',)                         idx(20) )\n................ 57 : ()              | ('b',)                         idx(21) )\n.......... 57 : ()              | ('b',)                         idx(22) )\n........ 57 : ()              | ('b',)                         idx(23) )\n0  : ()              | ('8', '11')                    idx(0) ) False\n8  : ()              | ('42',)                        idx(0) ) False\n42 : ()              | ('15', '83')                   idx(0) ) False\n15 : ()              | ('35', '83')                   idx(0) ) False\n35 : ()              | ('57', '89')                   idx(0) ) False\n57 : ()              | ('b',)                         idx(0) ) False\n57 : ('b',)          | ()                             idx(0) Done) True\n35 : ('57',)         | ('89',)                        idx(0) ) False\n89 : ()              | ('83', '40')                   idx(1) ) False\n83 : ()              | ('a',)                         idx(1) ) False\n83 : ('a',)          | ()                             idx(1) Done) True\n89 : ('83',)         | ('40',)                        idx(1) ) False\n40 : ()              | ('57', '101')                  idx(2) ) False\n57 : ()              | ('b',)                         idx(2) ) False\n57 : ('b',)          | ()                             idx(2) Done) True\n40 : ('57',)         | ('101',)                       idx(2) ) False\n101: ()              | ('57', '72')                   idx(3) ) False\n57 : ()              | ('b',)                         idx(3) ) False\n57 : ('b',)          | ()                             idx(3) Done) True\n101: ('57',)         | ('72',)                        idx(3) ) False\n72 : ()              | ('83', '83')                   idx(4) ) False\n83 : ()              | ('a',)                         idx(4) ) False\n83 : ('a',)          | ()                             idx(4) Done) True\n72 : ('83',)         | ('83',)                        idx(4) ) False\n83 : ()              | ('a',)                         idx(5) ) False\n83 : ('a',)          | ()                             idx(5) Done) True\n72 : ('83', '83')    | ()                             idx(4) Done) True\n101: ('57', '72')    | ()                             idx(3) Done) True\n40 : ('57', '101')   | ()                             idx(2) Done) True\n89 : ('83', '40')    | ()                             idx(1) Done) True\n35 : ('57', '89')    | ()                             idx(0) Done) True\n15 : ('35',)         | ('83',)                        idx(0) ) False\n83 : ()              | ('a',)                         idx(6) ) False\n83 : ('a',)          | ()                             idx(6) Done) True\n15 : ('35', '83')    | ()                             idx(0) Done) True\n42 : ('15',)         | ('83',)                        idx(0) ) False\n83 : ()              | ('a',)                         idx(7) ) False\n83 : ('a',)          | ()                             idx(7) Done) True\n42 : ('15', '83')    | ()                             idx(0) Done) True\n8  : ('42',)         | ()                             idx(0) Done) True\n0  : ('8',)          | ('11',)                        idx(0) ) False\n11 : ()              | ('42', '31')                   idx(8) ) False\n42 : ()              | ('66', '57')                   idx(8) ) False\n66 : ()              | ('87', '83')                   idx(8) ) False\n87 : ()              | ('131', '57')                  idx(8) ) False\n131: ()              | ('74', '57')                   idx(8) ) False\n74 : ()              | ('98', '57')                   idx(8) ) False\n98 : ()              | ('108', '57')                  idx(8) ) False\n108: ()              | ('57', '95')                   idx(8) ) False\n57 : ()              | ('b',)                         idx(8) ) False\n57 : ('b',)          | ()                             idx(8) Done) True\n108: ('57',)         | ('95',)                        idx(8) ) False\n95 : ()              | ('57',)                        idx(9) ) False\n57 : ()              | ('b',)                         idx(9) ) False\n57 : ('b',)          | ()                             idx(9) Done) True\n95 : ('57',)         | ()                             idx(9) Done) True\n108: ('57', '95')    | ()                             idx(8) Done) True\n98 : ('108',)        | ('57',)                        idx(8) ) False\n57 : ()              | ('b',)                         idx(10) ) False\n57 : ('b',)          | ()                             idx(10) Done) True\n98 : ('108', '57')   | ()                             idx(8) Done) True\n74 : ('98',)         | ('57',)                        idx(8) ) False\n57 : ()              | ('b',)                         idx(11) ) False\n57 : ('b',)          | ()                             idx(11) Done) True\n74 : ('98', '57')    | ()                             idx(8) Done) True\n131: ('74',)         | ('57',)                        idx(8) ) False\n57 : ()              | ('b',)                         idx(12) ) False\n57 : ('b',)          | ()                             idx(12) Done) True\n131: ('74', '57')    | ()                             idx(8) Done) True\n87 : ('131',)        | ('57',)                        idx(8) ) False\n57 : ()              | ('b',)                         idx(13) ) False\n57 : ('b',)          | ()                             idx(13) Done) True\n87 : ('131', '57')   | ()                             idx(8) Done) True\n66 : ('87',)         | ('83',)                        idx(8) ) False\n83 : ()              | ('a',)                         idx(14) ) False\n83 : ('a',)          | ()                             idx(14) Done) True\n66 : ('87', '83')    | ()                             idx(8) Done) True\n42 : ('66',)         | ('57',)                        idx(8) ) False\n57 : ()              | ('b',)                         idx(15) ) False\n57 : ('b',)          | ()                             idx(15) Done) True\n42 : ('66', '57')    | ()                             idx(8) Done) True\n11 : ('42',)         | ('31',)                        idx(8) ) False\n31 : ()              | ('83', '71')                   idx(16) ) False\n83 : ()              | ('a',)                         idx(16) ) False\n83 : ('a',)          | ()                             idx(16) Done) True\n31 : ('83',)         | ('71',)                        idx(16) ) False\n71 : ()              | ('60', '57')                   idx(17) ) False\n60 : ()              | ('24', '57')                   idx(17) ) False\n24 : ()              | ('83', '117')                  idx(17) ) False\n83 : ()              | ('a',)                         idx(17) ) False\n83 : ('a',)          | ()                             idx(17) Done) True\n24 : ('83',)         | ('117',)                       idx(17) ) False\n117: ()              | ('83', '16')                   idx(18) ) False\n83 : ()              | ('a',)                         idx(18) ) False\n83 : ('a',)          | ()                             idx(18) Done) True\n117: ('83',)         | ('16',)                        idx(18) ) False\n16 : ()              | ('47', '57')                   idx(19) ) False\n47 : ()              | ('83', '95')                   idx(19) ) False\n83 : ()              | ('a',)                         idx(19) ) False\n83 : ('a',)          | ()                             idx(19) Done) True\n47 : ('83',)         | ('95',)                        idx(19) ) False\n95 : ()              | ('83',)                        idx(20) ) False\n83 : ()              | ('a',)                         idx(20) ) False\n83 : ('a',)          | ()                             idx(20) Done) True\n95 : ('83',)         | ()                             idx(20) Done) True\n47 : ('83', '95')    | ()                             idx(19) Done) True\n16 : ('47',)         | ('57',)                        idx(19) ) False\n57 : ()              | ('b',)                         idx(21) ) False\n57 : ('b',)          | ()                             idx(21) Done) True\n16 : ('47', '57')    | ()                             idx(19) Done) True\n117: ('83', '16')    | ()                             idx(18) Done) True\n24 : ('83', '117')   | ()                             idx(17) Done) True\n60 : ('24',)         | ('57',)                        idx(17) ) False\n57 : ()              | ('b',)                         idx(22) ) False\n57 : ('b',)          | ()                             idx(22) Done) True\n60 : ('24', '57')    | ()                             idx(17) Done) True\n71 : ('60',)         | ('57',)                        idx(17) ) False\n57 : ()              | ('b',)                         idx(23) ) False\n57 : ('b',)          | ()                             idx(23) Done) True\n71 : ('60', '57')    | ()                             idx(17) Done) True\n31 : ('83', '71')    | ()                             idx(16) Done) True\n11 : ('42', '31')    | ()                             idx(8) Done) True\n0  : ('8', '11')     | ()                             idx(0) Done) True"
  },
  {
    "objectID": "00_common.html",
    "href": "00_common.html",
    "title": "aocutils",
    "section": "",
    "text": "Functions that you can use quite often\n\n\nsource\n\n\n\n patch (f)\n\nDecorator: add f to the first parameter’s class (based on f’s type annotations)\n\nsource\n\n\n\n\n patch_to (cls, as_prop=False)\n\nDecorator: add f to cls\n\nsource\n\n\n\n\n copy_func (f)\n\nCopy a non-builtin function (NB copy.copy does not work for this)\n\nclass Test():\n    def __init__(self):\n        pass\n\n\n@patch_to(Test)\ndef hi(self):\n    print('hi there')\nTest().hi()\n\nhi there\n\n\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Examples\n  else: warn(msg)\n\nsource\n\n\n\n\n to_int (it:collections.abc.Iterable, intonly=False)\n\nReturns contents of iterable converted to int if possible\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nit\nIterable\n\nwatch out because passing a string ‘12t’ will be ripped into a list [1,2,t]\n\n\nintonly\nbool\nFalse\nremoves non-ints if set to True\n\n\n\n\nassert to_int([\"12\",2,'a']) == [12, 2, 'a']\nassert to_int([\"12\",2,'a'], intonly=True) == [12, 2]\nassert to_int([[[1],[-2,3]],[4,5,6]]) == [[[1], [-2, 3]], [4, 5, 6]]\nassert to_int('bla 202') == ['bla', 202]\nassert to_int(None) == []\nassert to_int('') == []\nassert to_int([]) == []\n\nwatch out string will be converted into list with string.split()\nempty line, returning []\nempty line, returning []\nempty line, returning []\n\n\n\nsource\n\n\n\n\n ints (text:str, tolist=False)\n\nReturn a tuple of all the integers in a string, discards everything else\n\nassert ints('blabla202test-20') == (202,-20)\nassert ints('blabla202test-20', tolist=True) == [202,-20]\n\n\nsource\n\n\n\n\n flatten (x:collections.abc.Iterable)\n\n\nassert flatten([1,2,4,[99,33,[22,11]], 'f']) == [1, 2, 4, 99, 33, 22, 11, 'f']\nassert flatten([[[1],[2,3]],[4,5,6]]) == [1, 2, 3, 4, 5, 6]\n\n\nsource\n\n\n\n\n zippify (iterable, len=2, cat=False)\n\nZips an iterable with arbitrary length pieces\ne.g. to create a moving window with len n\nExample: zippify(‘abcd’,2, cat=False) –> [(‘a’, ‘b’), (‘b’, ‘c’), (‘c’, ‘d’)]\nIf cat = True, joins the moving windows together zippify(‘abcd’,2, cat=True) –> [‘ab’, ‘bc’, ‘cd’]\n\nassert zippify('abcd',2, cat=True) == ['ab', 'bc', 'cd']\nassert zippify('abcd',2, cat=False) == [('a', 'b'), ('b', 'c'), ('c', 'd')]\nassert zippify('abcde',3) == [('a', 'b', 'c'), ('b', 'c', 'd'), ('c', 'd', 'e')]\n\n\nsource\n\n\n\n\n multidict (items:collections.abc.Iterable[tuple], both=False)\n\nGiven (key, val) pairs, return {key: [val, ….], …}.\n\ntuples = [(2, 'a'),(2, 'b'),(4, 'a')]\ndict(tuples), multidict(tuples)\n\n({2: 'b', 4: 'a'}, defaultdict(list, {2: ['a', 'b'], 4: ['a']}))\n\n\n\nsource\n\n\n\n\n rev (d:dict)\n\nReverses keys and values. Make sure the value is hashable\n\na = {(0,0):'f'}\na |= rev(a)\nassert a == {(0, 0): 'f', 'f': (0, 0)}"
  },
  {
    "objectID": "00_common.html#peter-norvig-aoc-helper-functions",
    "href": "00_common.html#peter-norvig-aoc-helper-functions",
    "title": "aocutils",
    "section": "Peter Norvig AoC helper functions",
    "text": "Peter Norvig AoC helper functions\n\nAll of these are taken from github of Peter Norvig https://github.com/norvig/pytudes/blob/master/ipynb/Advent-2020.ipynb\n\n\nsource\n\ndata\n\n data (filename='input', parser=<class 'str'>, sep='\\n')\n\nSplit the day’s input file into sections separated by sep, and apply parser to each.\n\nsource\n\n\nquantify\n\n quantify (iterable, pred=<class 'bool'>)\n\nCount the number of items in iterable for which pred is true.\n\nassert quantify(['a','11',11,22], pred=lambda x: isinstance(x, int)) == 2\nassert quantify([1,2,3,4,5,6,7], lambda x: x==5) == 1\nassert quantify([1,2,3,4], lambda x: x<3) == 2\n\n\nsource\n\n\natom\n\n atom (text:str)\n\nParse text into a single float or int or str.\n\natom('11') == 11\n\nTrue\n\n\n\nsource\n\n\natoms\n\n atoms (text:str, ignore='', sep=None)\n\nParse text into atoms (numbers or strs), possibly ignoring a regex.\n\natoms('abc 111 def')\n\n('abc', 111, 'def')\n\n\n\nsource\n\n\nlist_atoms\n\n list_atoms (inp:list)\n\n\nassert list_atoms(['1', '3.2', 'a', 1])\n\n\nsource\n\n\nlist_multiply\n\n list_multiply (a:collections.abc.Iterable, b:collections.abc.Iterable)\n\nMultiplies two iterables elementwise\nlist_multiply([1,2,3],[2,3,4]) -> [2, 6, 12]\n\nassert list_multiply([1,2,3],[2,3,4]) == [2, 6, 12]\nassert list_multiply((1,2,3),(2,3,4)) == [2, 6, 12]\nassert list_multiply([1,2,3],(2,3,4)) == [2, 6, 12]\n\n\nsource\n\n\nmapt\n\n mapt (fn, *args)\n\nmap(fn, *args) and return the result as a tuple."
  },
  {
    "objectID": "visual.html",
    "href": "visual.html",
    "title": "Visualisations",
    "section": "",
    "text": "source\n\nlabelize\n\n labelize (lines)\n\nReturns a dict with index, description Specifically for list of instructions to turn them into strings, preceded by their index E.g. labels[3] = ‘3jmpa’\n\nsource\n\n\nvisualize_graph\n\n visualize_graph (edges:set, labels=None)\n\nPlots graph. edges: set with tuples (fromnode, tonode) labels: optional dictionary with node descriptions. If None, the node variable names will be used\nIf the names are passed and the node is not found, ’Missing’will be appended in the label\nUsage example: from aocutils.special import visualize_graph, labelize visualize_graph(edges, labelize(lines))\nHere is a guide how to install pygraphviz\nhttps://pygraphviz.github.io/documentation/stable/install.html\npython -m pip install –global-option=build_ext –global-option=“-IC:Files\n” –global-option=“-LC:Files” pygraphviz\n\nedges = {(39, 40), (39, 47), (40, 41), (41, 42), (41, 45)}\nlabels = {39: 'bla',\n             40: '2',\n             41: '3',\n             42: '42',\n             45: '45'}\nvisualize_graph(edges, labels)\n\n\n\n\n\nsource\n\n\nanimate_grid\n\n animate_grid (arr, step)\n\n\n\n\n\n\n\n\n\nDetails\n\n\n\n\narr\nNumpy arr, e.g. np.random.rand(36).reshape((6,6))\n\n\nstep\nFunction called with a counter, should return new grid, e.g. return np.random.rand(36).reshape((6,6))\n\n\n\n\ndef step(i):\n    return np.random.rand(36).reshape((6,6))\n\narr = np.random.rand(36).reshape((6,6))\nanimate_grid(arr, step)\n\n\nsource\n\n\nplot\n\n plot (grid)\n\n\ntest = [[1,2,4],[1,2,6]]\nplot(test)"
  },
  {
    "objectID": "special.html",
    "href": "special.html",
    "title": "Specific algo’s",
    "section": "",
    "text": "source\n\nmd5\n\n md5 (input)\n\n\nmd5('bla')\n\n'128ecf542a35ac5270a87dc740918404'\n\n\n\nsource\n\n\nbinarysearch\n\n binarysearch (minim, maxim, function, flips_to_true=True, verbose=True)\n\nfunction needs to return a boolean whether the solution is ok this implementation is for function that starts with false for minim and flip to true for TTTTFFFF, pass set flips_to_true flag to false. This flag is important to set correct!\n\nassert binarysearch(0,200, lambda x: x > 50, verbose=False) == 51\nassert binarysearch(0,200, lambda x: x < 50, flips_to_true=False, verbose=False) == 49\nassert binarysearch(0,201, lambda x: x > 50, verbose=False) == 51\nassert binarysearch(0,201, lambda x: x < 50, flips_to_true=False, verbose=False) == 49\nassert binarysearch(0,200, lambda x: x >= 50, verbose=False) == 50\nassert binarysearch(0,200, lambda x: x <= 50, flips_to_true=False, verbose=False) == 50\nassert binarysearch(0,201, lambda x: x >= 50, verbose=False) == 50\nassert binarysearch(0,201, lambda x: x <= 50, flips_to_true=False, verbose=False) == 50\n\nsolution found 51\nsolution found 49\nsolution found 51\nsolution found 49\nsolution found 50\nsolution found 50\nsolution found 50\nsolution found 50\n\n\n\nsource\n\n\ndeduce_matches\n\n deduce_matches (input_dict)\n\nTakes a dict with multiple keys that have one or more options The trick is to start with what you know: keys with one option and remove that option for the other keys Continuing that process leads to every key ending up with one option (hopefully)\n\nmeals = {'morning': ['yoghurt', 'lasagna', 'pizza'],\n        'lunch': ['sandwich', 'lasagna'],\n        'evening': ['pizza', 'lasagna'],\n        'night': ['pizza']}\n\nanswer = {'morning': 'yoghurt',\n 'lunch': 'sandwich',\n 'evening': 'lasagna',\n 'night': 'pizza'}\nassert deduce_matches(meals) == answer\n\n# now test with tuples instead of strings as option\nmeals = {'morning': [('yoghurt',), ('lasagna',),('pizza',)],\n        'lunch': [('sandwich',), ('lasagna',)],\n        'evening': [('pizza',), ('lasagna',)],\n        'night': [('pizza',)]}\nassert deduce_matches(meals) == {k: tuple([v,]) for k, v in answer.items()}\n\n\nsource\n\n\nfind_specific_pattern\n\n find_specific_pattern (start_pattern, function, goal=None,\n                        n_iter=1000000000)\n\nReturns when a SPECIFIED pattern has been found from a function If goal = None, then first time the start pattern shows up again is returned Returns steps, pattern\n\nsource\n\n\nfind_repeat\n\n find_repeat (start_pattern, function, n_iter=None)\n\nReturns when a NONSPECFIED repeating pattern has been found Returns steps, pattern\n\nsource\n\n\nfind_cycle\n\n find_cycle (start_pattern, function)\n\nFind cycle length of some repeating pattern, by first inspecting which item repeats when And subtracting the time the item was first seen\n\nassert find_specific_pattern(99,Test_gen()) == 5\nassert find_specific_pattern(99,Test_gen(),goal=10) == 2\nassert find_specific_pattern(99,Test_gen(),goal=5) == 1\n\nAt step 5, goal: 99 was found\nAt step 2, goal: 10 was found\nAt step 1, goal: 5 was found\n\n\n\nassert find_repeat(-1,lambda x: (x+1) % 7) == (8,0)\n\nRepeat was found at step 8. Pattern: 0 returning steps, pattern\n\n\n\nsource\n\n\nUnionFind\n\n UnionFind (it)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n# tested above class on some leetcode problems: works!\nuf = UnionFind([100,101,102,103])\nuf.union(101,100)\nuf.groups()\n\n[[100, 101], [102], [103]]\n\n\n\nsource\n\n\nOctree\n\n Octree (left:int, right:int, up:int, leftrange:int, rightrange:int,\n         uprange:int, totalhits:int=0)\n\n\nRobot = namedtuple('Robot', 'l r u p')\nlines=open('recursivepartition.txt').read().splitlines()\nmaxx = 0\nrobots =[Robot(*ints(line)) for line in lines]\nmaxx = max(max(r.r, r.l, r.u) + r.p for r in robots)\nsize = 2\nwhile size < maxx:\n    size *= 2\n\nb = Octree(0,0,0,size,size,size)\nb.count(robots)\nqueue = [b]\n\nwhile queue:\n    cur = heapq.heappop(queue)\n    if cur.leftrange == 0:\n        break\n    else:\n        for b in cur.split():\n            b.count(robots)\n            heapq.heappush(queue, b)\nassert cur.distance == 121493971\n\n\nsource\n\n\nLazySegmentTree\n\n LazySegmentTree (left, right)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nl = LazySegmentTree(0,100)\nl.add(0,50)\nl.add(0,50)\nl.add(49,51)\nl.add(51,51)\nassert l.getbest() == 3\n\n\nsource\n\n\nTrie\n\n Trie ()"
  },
  {
    "objectID": "07_shunting_yard.html",
    "href": "07_shunting_yard.html",
    "title": "aocutils",
    "section": "",
    "text": "source\n\nShuntingYard\n\n ShuntingYard (prec=None, ops=None)\n\nInit with a precedence dictionary. Then call SY.calc(line), with a string as input Symbols and numbers should be spaced from eachother\nExample precedence dictionary. Higher numbers have a higher precedence: prec = defaultdict(lambda: int(9)) prec.update({’*‘:4,’+‘:4,’/‘:4,’:‘:4,’-‘:4,’^‘:4,’**’:4})\nself.ops is a dictionary with the functions that are called with certain symbols, e.g. Example self.ops: self.ops = { ‘+’ : operator.add, ‘-’ : operator.sub, ’*’ : operator.mul, ‘/’ : operator.truediv,\n‘:’ : operator.truediv, ‘%’ : operator.mod, ‘^’ : operator.xor, ’**’ : pow, }\n\nf = open('shunting.txt')\nlines = [line.rstrip('\\n') for line in f]\nprec = {'*':4, '+':4}\nSY = ShuntingYard(prec)\nans = 0\nfor line in lines:\n    ans += SY.calc(line)\nassert ans == 21993583522852\n\nprec = {'*':4, '+':5}\nSY = ShuntingYard(prec)\nans = 0\nfor line in lines:\n    ans += SY.calc(line)\nassert ans == 122438593522757\n\n\nSY = ShuntingYard()\nassert SY.calc(\"- 1 - 4\") == -5\nassert SY.calc(\"1 - ( - 2 )\") == 3\nassert SY.calc(\"- 1 - ( - 2 )\") == 1\nassert SY.calc(\"- 1 * 3 + 1\") == -2\nassert SY.calc(\"5 - 0 * 7\") == 5\nassert SY.calc(\"(5 - 0) * 7\") == 35\nassert SY.calc(\" (            5        -    0     )   *   7\") == 35"
  }
]